// Generated by @wagmi/cli@1.0.0 on 11/10/2023 at 5:23:05 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Budget
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export const budgetABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'BadInput' },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'allowanceId', internalType: 'uint256', type: 'uint256' }],
    name: 'DisabledAllowance',
  },
  { type: 'error', inputs: [], name: 'InheritedAmountNotAllowed' },
  { type: 'error', inputs: [], name: 'InvalidTimeShift' },
  { type: 'error', inputs: [], name: 'NativeValueMismatch' },
  {
    type: 'error',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'remainingBudget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Overbudget',
  },
  {
    type: 'error',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PaymentExecutionFailed',
  },
  {
    type: 'error',
    inputs: [
      { name: 'patentToken', internalType: 'address', type: 'address' },
      { name: 'childToken', internalType: 'address', type: 'address' },
    ],
    name: 'TokenMismatch',
  },
  {
    type: 'error',
    inputs: [{ name: 'allowanceId', internalType: 'uint256', type: 'uint256' }],
    name: 'UnauthorizedNotAllowanceAdmin',
  },
  { type: 'error', inputs: [], name: 'UnauthorizedNotDao' },
  {
    type: 'error',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'actor', internalType: 'address', type: 'address' },
    ],
    name: 'UnauthorizedPaymentExecution',
  },
  {
    type: 'error',
    inputs: [{ name: 'allowanceId', internalType: 'uint256', type: 'uint256' }],
    name: 'UnexistentAllowance',
  },
  { type: 'error', inputs: [], name: 'ZeroAmountPayment' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AllowanceAmountChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'parentAllowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'recurrency', internalType: 'EncodedTimeShift', type: 'bytes6', indexed: false },
      { name: 'nextResetTime', internalType: 'uint40', type: 'uint40', indexed: false },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'AllowanceCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'nextResetTime', internalType: 'uint40', type: 'uint40', indexed: false },
      { name: 'description', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'AllowanceDebited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'AllowanceNameChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'spender', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AllowanceSpenderChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'isEnabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'AllowanceStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'tos', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'nextResetTime', internalType: 'uint40', type: 'uint40', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'MultiPaymentExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'nextResetTime', internalType: 'uint40', type: 'uint40', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'PaymentExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_BUDGET_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allowances',
    outputs: [
      { name: 'parentId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'spent', internalType: 'uint256', type: 'uint256' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nextResetTime', internalType: 'uint40', type: 'uint40' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recurrency', internalType: 'EncodedTimeShift', type: 'bytes6' },
      { name: 'isDisabled', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allowancesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'parentAllowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'recurrency', internalType: 'EncodedTimeShift', type: 'bytes6' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'createAllowance',
    outputs: [{ name: 'allowanceId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'description', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'debitAllowance',
    outputs: [{ name: 'nextResetTime', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'tos', internalType: 'address[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'executeMultiPayment',
    outputs: [{ name: 'nextResetTime', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'executePayment',
    outputs: [{ name: 'nextResetTime', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_dao', internalType: 'contract IDAO', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'actor', internalType: 'address', type: 'address' },
    ],
    name: 'isAdminOnAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [{ name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowanceAmount',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setAllowanceName',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowanceSpender',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowanceId', internalType: 'uint256', type: 'uint256' },
      { name: 'isEnabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setAllowanceState',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export const budgetAddress = {
  5: '0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export const budgetConfig = { address: budgetAddress, abi: budgetABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BudgetSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const budgetSetupABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CallbackHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const callbackHandlerABI = [
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export const daoABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }], name: 'ActionFailed' },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionInterfacNotSupported',
  },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionNotAContract',
  },
  { type: 'error', inputs: [], name: 'FunctionRemoved' },
  { type: 'error', inputs: [], name: 'GrantWithConditionNotSupported' },
  { type: 'error', inputs: [], name: 'InsufficientGas' },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NativeTokenDepositAmountMismatch',
  },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [{ name: 'protocolVersion', internalType: 'uint8[3]', type: 'uint8[3]' }],
    name: 'ProtocolVersionUpgradeNotSupported',
  },
  { type: 'error', inputs: [], name: 'ReentrantCall' },
  { type: 'error', inputs: [], name: 'TooManyActions' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  { type: 'error', inputs: [], name: 'ZeroAmount' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: '_reference', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'callId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      { name: 'condition', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'daoURI', internalType: 'string', type: 'string', indexed: false }],
    name: 'NewURI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'interfaceId', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4', indexed: false },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address', indexed: false }],
    name: 'TrustedForwarderSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXECUTE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_METADATA_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_DAO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VALIDATE_SIGNATURE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_condition', internalType: 'contract IPermissionCondition', type: 'address' },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      { name: '_initialOwner', internalType: 'address', type: 'address' },
      { name: '_trustedForwarder', internalType: 'address', type: 'address' },
      { name: 'daoURI_', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_previousProtocolVersion', internalType: 'uint8[3]', type: 'uint8[3]' },
      { name: '_initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'initializeFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDaoURI', internalType: 'string', type: 'string' }],
    name: 'setDaoURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newTrustedForwarder', internalType: 'address', type: 'address' }],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export const daoAddress = {
  5: '0x970Fed12e8816aa4e5D57b9cCf66263DE8732a0d',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export const daoConfig = { address: daoAddress, abi: daoABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAOMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoMockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'initialOwner', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionInterfacNotSupported',
  },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionNotAContract',
  },
  { type: 'error', inputs: [], name: 'GrantWithConditionNotSupported' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: '_reference', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'callId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      { name: 'condition', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'interfaceId', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4', indexed: false },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address', indexed: false }],
    name: 'TrustedForwarderSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_condition', internalType: 'contract IPermissionCondition', type: 'address' },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DaoAuthorizableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoAuthorizableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ENS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ensABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'label', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'NewOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'resolver', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'NewResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'ttl', internalType: 'uint64', type: 'uint64', indexed: false },
    ],
    name: 'NewTTL',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'recordExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'resolver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'resolver', internalType: 'address', type: 'address' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setRecord',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resolver', internalType: 'address', type: 'address' },
    ],
    name: 'setResolver',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'label', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'setSubnodeOwner',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'label', internalType: 'bytes32', type: 'bytes32' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'resolver', internalType: 'address', type: 'address' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setSubnodeRecord',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ttl', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setTTL',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ttl',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ENSSubdomainRegistrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ensSubdomainRegistrarABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [
      { name: 'subnode', internalType: 'bytes32', type: 'bytes32' },
      { name: 'nodeOwner', internalType: 'address', type: 'address' },
    ],
    name: 'AlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resolver', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRAR_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ens',
    outputs: [{ name: '', internalType: 'contract ENS', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_managingDao', internalType: 'contract IDAO', type: 'address' },
      { name: '_ens', internalType: 'contract ENS', type: 'address' },
      { name: '_node', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'node',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_label', internalType: 'bytes32', type: 'bytes32' },
      { name: '_targetAddress', internalType: 'address', type: 'address' },
    ],
    name: 'registerSubnode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_resolver', internalType: 'address', type: 'address' }],
    name: 'setDefaultResolver',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165StorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165StorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967ProxyABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_logic', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IABIResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iabiResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'contentType', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'ABIChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentTypes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ABI',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddrResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddrResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AddrChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddressResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddressResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'coinType', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newAddress', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'AddressChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addr',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContentHashResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContentHashResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'hash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ContenthashChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'contenthash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idaoABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: '_reference', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'actor', internalType: 'address', type: 'address', indexed: true },
      { name: 'callId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'interfaceId', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4', indexed: false },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address', indexed: false }],
    name: 'TrustedForwarderSet',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_trustedForwarder', internalType: 'address', type: 'address' }],
    name: 'setTrustedForwarder',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDNSRecordResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idnsRecordResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'resource', internalType: 'uint16', type: 'uint16', indexed: false },
      { name: 'record', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSRecordChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'resource', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'DNSRecordDeleted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resource', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'dnsRecord',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDNSZoneResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idnsZoneResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'lastzonehash', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'zonehash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSZonehashChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'zonehash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEIP4824
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ieip4824ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '_daoURI', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1271
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1271ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IExtendedResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iExtendedResolverABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'bytes', type: 'bytes' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'resolve',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInterfaceResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInterfaceResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'implementer', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'InterfaceChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'interfaceImplementer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMajorityVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMajorityVotingABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8', indexed: false },
      { name: 'votingPower', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [{ name: '', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMembership
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMembershipABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'members', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'members', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'definingContract', internalType: 'address', type: 'address', indexed: true }],
    name: 'MembershipContractAnnounced',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INameResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iNameResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'NameChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPermissionCondition
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPermissionConditionABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: 'isPermitted', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [{ name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPluginRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginRepoABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_pluginSetupAddress', internalType: 'address', type: 'address' },
      { name: '_buildMetadata', internalType: 'bytes', type: 'bytes' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateReleaseMetadata',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProposal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProposalABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'startDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'endDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProtocolVersion
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProtocolVersionABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '_version', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPubkeyResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPubkeyResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'x', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'y', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'PubkeyChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'pubkey',
    outputs: [
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITextResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTextResolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'indexedKey', internalType: 'string', type: 'string', indexed: true },
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'TextChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'text',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotesUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InterfaceBasedRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const interfaceBasedRegistryABI = [
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractERC165SupportInvalid',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractInterfaceInvalid',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRY_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'entries',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaceId',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MajorityVotingBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const majorityVotingBaseABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'startDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'endDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8', indexed: false },
      { name: 'votingPower', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8', indexed: false },
      { name: 'supportThreshold', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'minParticipation', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'minDuration', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'minProposerVotingPower', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [{ name: '', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [{ name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          { name: 'minProposerVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [{ name: '', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionCondition
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionConditionABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: 'isPermitted', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionLibABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NO_CONDITION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionManagerABI = [
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionInterfacNotSupported',
  },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionNotAContract',
  },
  { type: 'error', inputs: [], name: 'GrantWithConditionNotSupported' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      { name: 'condition', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_condition', internalType: 'contract IPermissionCondition', type: 'address' },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export const pluginRepoABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionInterfacNotSupported',
  },
  {
    type: 'error',
    inputs: [{ name: 'condition', internalType: 'contract IPermissionCondition', type: 'address' }],
    name: 'ConditionNotAContract',
  },
  { type: 'error', inputs: [], name: 'EmptyReleaseMetadata' },
  { type: 'error', inputs: [], name: 'GrantWithConditionNotSupported' },
  { type: 'error', inputs: [], name: 'InvalidPluginSetupInterface' },
  {
    type: 'error',
    inputs: [
      { name: 'latestRelease', internalType: 'uint8', type: 'uint8' },
      { name: 'newRelease', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'InvalidReleaseIncrement',
  },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8' },
      { name: 'build', internalType: 'uint16', type: 'uint16' },
      { name: 'pluginSetup', internalType: 'address', type: 'address' },
    ],
    name: 'PluginSetupAlreadyInPreviousRelease',
  },
  { type: 'error', inputs: [], name: 'ReleaseDoesNotExist' },
  { type: 'error', inputs: [], name: 'ReleaseZeroNotAllowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'versionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'VersionHashDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      { name: 'condition', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'releaseMetadata', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ReleaseMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      { name: 'where', internalType: 'address', type: 'address', indexed: false },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'release', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'build', internalType: 'uint16', type: 'uint16', indexed: false },
      { name: 'pluginSetup', internalType: 'address', type: 'address', indexed: true },
      { name: 'buildMetadata', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VersionCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAINTAINER_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REPO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_release', internalType: 'uint8', type: 'uint8' }],
    name: 'buildCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_pluginSetup', internalType: 'address', type: 'address' },
      { name: '_buildMetadata', internalType: 'bytes', type: 'bytes' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createVersion',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_pluginSetup', internalType: 'address', type: 'address' }],
    name: 'getLatestVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_release', internalType: 'uint8', type: 'uint8' }],
    name: 'getLatestVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tagHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_tag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'getVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginRepo.Version',
        type: 'tuple',
        components: [
          {
            name: 'tag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetup', internalType: 'address', type: 'address' },
          { name: 'buildMetadata', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_condition', internalType: 'contract IPermissionCondition', type: 'address' },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initialOwner', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRelease',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_release', internalType: 'uint8', type: 'uint8' },
      { name: '_releaseMetadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateReleaseMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export const pluginRepoAddress = {
  5: '0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export const pluginRepoConfig = { address: pluginRepoAddress, abi: pluginRepoABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginRepoRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginRepoRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractERC165SupportInvalid',
  },
  {
    type: 'error',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'ContractInterfaceInvalid',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  { type: 'error', inputs: [], name: 'EmptyPluginRepoSubdomain' },
  {
    type: 'error',
    inputs: [{ name: 'subdomain', internalType: 'string', type: 'string' }],
    name: 'InvalidPluginSubdomain',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'subdomain', internalType: 'string', type: 'string', indexed: false },
      { name: 'pluginRepo', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'PluginRepoRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_REGISTRY_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'entries',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      { name: '_subdomainRegistrar', internalType: 'contract ENSSubdomainRegistrar', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subdomain', internalType: 'string', type: 'string' },
      { name: 'pluginRepo', internalType: 'address', type: 'address' },
    ],
    name: 'registerPluginRepo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'subdomainRegistrar',
    outputs: [{ name: '', internalType: 'contract ENSSubdomainRegistrar', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaceId',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginSetupProcessor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export const pluginSetupProcessorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_repoRegistry', internalType: 'contract PluginRepoRegistry', type: 'address' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'plugin', internalType: 'address', type: 'address' }],
    name: 'IPluginNotSupported',
  },
  {
    type: 'error',
    inputs: [
      { name: 'currentAppliedSetupId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'appliedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'InvalidAppliedSetupId',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'currentVersionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
      {
        name: 'newVersionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'InvalidUpdateVersion',
  },
  { type: 'error', inputs: [], name: 'PluginAlreadyInstalled' },
  {
    type: 'error',
    inputs: [{ name: 'plugin', internalType: 'address', type: 'address' }],
    name: 'PluginNonupgradeable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proxy', internalType: 'address', type: 'address' },
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'PluginProxyUpgradeFailed',
  },
  { type: 'error', inputs: [], name: 'PluginRepoNonexistent' },
  {
    type: 'error',
    inputs: [{ name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'SetupAlreadyPrepared',
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'SetupApplicationUnauthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'SetupNotApplicable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'plugin', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'appliedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'InstallationApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address', indexed: true },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'plugin', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: 'InstallationPrepared',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'plugin', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'UninstallationApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address', indexed: true },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      {
        name: 'setupPayload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'UninstallationPrepared',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'plugin', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'appliedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'UpdateApplied',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'dao', internalType: 'address', type: 'address', indexed: true },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address', indexed: true },
      {
        name: 'versionTag',
        internalType: 'struct PluginRepo.Tag',
        type: 'tuple',
        components: [
          { name: 'release', internalType: 'uint8', type: 'uint8' },
          { name: 'build', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
      {
        name: 'setupPayload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
        indexed: false,
      },
      { name: 'initData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'UpdatePrepared',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_INSTALLATION_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_UNINSTALLATION_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APPLY_UPDATE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyInstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
            ],
          },
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'helpersHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyInstallation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyUninstallationParams',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
            ],
          },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'applyUninstallation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.ApplyUpdateParams',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
            ],
          },
          { name: 'initData', internalType: 'bytes', type: 'bytes' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'helpersHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyUpdate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareInstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
            ],
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareUninstallationParams',
        type: 'tuple',
        components: [
          {
            name: 'pluginSetupRef',
            internalType: 'struct PluginSetupRef',
            type: 'tuple',
            components: [
              {
                name: 'versionTag',
                internalType: 'struct PluginRepo.Tag',
                type: 'tuple',
                components: [
                  { name: 'release', internalType: 'uint8', type: 'uint8' },
                  { name: 'build', internalType: 'uint16', type: 'uint16' },
                ],
              },
              { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
            ],
          },
          {
            name: 'setupPayload',
            internalType: 'struct IPluginSetup.SetupPayload',
            type: 'tuple',
            components: [
              { name: 'plugin', internalType: 'address', type: 'address' },
              { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_params',
        internalType: 'struct PluginSetupProcessor.PrepareUpdateParams',
        type: 'tuple',
        components: [
          {
            name: 'currentVersionTag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'newVersionTag',
            internalType: 'struct PluginRepo.Tag',
            type: 'tuple',
            components: [
              { name: 'release', internalType: 'uint8', type: 'uint8' },
              { name: 'build', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'pluginSetupRepo', internalType: 'contract PluginRepo', type: 'address' },
          {
            name: 'setupPayload',
            internalType: 'struct IPluginSetup.SetupPayload',
            type: 'tuple',
            components: [
              { name: 'plugin', internalType: 'address', type: 'address' },
              { name: 'currentHelpers', internalType: 'address[]', type: 'address[]' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              { name: 'operation', internalType: 'enum PermissionLib.Operation', type: 'uint8' },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repoRegistry',
    outputs: [{ name: '', internalType: 'contract PluginRepoRegistry', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'states',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'currentAppliedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pluginInstallationId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'preparedSetupId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'validatePreparedSetupId',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export const pluginSetupProcessorAddress = {
  5: '0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export const pluginSetupProcessorConfig = {
  address: pluginSetupProcessorAddress,
  abi: pluginSetupProcessorABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginUUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginUupsUpgradeableABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [{ name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProposalUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proposalUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'startDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'endDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProtocolVersion
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const protocolVersionABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Resolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const resolverABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'contentType', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'ABIChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AddrChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'coinType', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newAddress', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'AddressChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'ContentChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'hash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ContenthashChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'resource', internalType: 'uint16', type: 'uint16', indexed: false },
      { name: 'record', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSRecordChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'resource', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'DNSRecordDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'lastzonehash', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'zonehash', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DNSZonehashChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'implementer', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'InterfaceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'NameChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'x', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'y', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'PubkeyChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'indexedKey', internalType: 'string', type: 'string', indexed: true },
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'TextChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentTypes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ABI',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addr',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'content',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'contenthash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'bytes32', type: 'bytes32' },
      { name: 'resource', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'dnsRecord',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'interfaceImplementer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nodehash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'multicallWithNodeCheck',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'multihash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'pubkey',
    outputs: [
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'bytes', type: 'bytes' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'resolve',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'contentType', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setABI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'coinType', internalType: 'uint256', type: 'uint256' },
      { name: 'a', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setAddr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'setAddr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setContent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setContenthash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setDnsrr',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' },
      { name: 'implementer', internalType: 'address', type: 'address' },
    ],
    name: 'setInterface',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setMultihash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'setName',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'x', internalType: 'bytes32', type: 'bytes32' },
      { name: 'y', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPubkey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setText',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'bytes32', type: 'bytes32' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'text',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'bytes32', type: 'bytes32' }],
    name: 'zonehash',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [{ name: 'excludedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [{ name: 'excludedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [{ name: 'excludedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [{ name: 'targetedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [{ name: 'targetedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaces',
    outputs: [
      {
        name: 'targetedInterfaces_',
        internalType: 'struct StdInvariant.FuzzInterface[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'artifacts', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [{ name: 'targetedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestnetERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testnetErc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals_', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestnetTokenFaucet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testnetTokenFaucetABI = [
  { type: 'error', inputs: [], name: 'TokenDoesNotExist' },
  { type: 'error', inputs: [], name: 'TokenExists' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allTokens',
    outputs: [
      { name: 'token', internalType: 'contract TestnetERC20', type: 'address' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'create',
    outputs: [{ name: 'token', internalType: 'contract TestnetERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract TestnetERC20', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'tokenWithSymbol',
    outputs: [{ name: '', internalType: 'contract TestnetERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TimeShiftLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const timeShiftLibABI = [{ type: 'error', inputs: [], name: 'InvalidTimeShift' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export const tokenVotingABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  { type: 'error', inputs: [], name: 'NoVotingPower' },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'members', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'members', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'definingContract', internalType: 'address', type: 'address', indexed: true }],
    name: 'MembershipContractAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'startDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'endDate', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'metadata', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8', indexed: false },
      { name: 'votingPower', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8', indexed: false },
      { name: 'supportThreshold', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'minParticipation', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'minDuration', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'minProposerVotingPower', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [{ name: '', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVotingToken',
    outputs: [{ name: '', internalType: 'contract IVotesUpgradeable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          { name: 'minProposerVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_token', internalType: 'contract IVotesUpgradeable', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [{ name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'protocolVersion',
    outputs: [{ name: '', internalType: 'uint8[3]', type: 'uint8[3]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          { name: 'votingMode', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          { name: 'minProposerVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voteOption', internalType: 'enum IMajorityVoting.VoteOption', type: 'uint8' },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [{ name: '', internalType: 'enum MajorityVotingBase.VotingMode', type: 'uint8' }],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export const tokenVotingAddress = {
  5: '0x17E36c2dF61Ee17E59070773228CAF35938F8ACd',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export const tokenVotingConfig = { address: tokenVotingAddress, abi: tokenVotingABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TribeTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tribeTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [{ name: 'excludedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [{ name: 'excludedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [{ name: 'excludedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [{ name: 'targetedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [{ name: 'targetedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaces',
    outputs: [
      {
        name: 'targetedInterfaces_',
        internalType: 'struct StdInvariant.FuzzInterface[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'artifacts', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [{ name: 'targetedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractRead({ abi: budgetABI, address: budgetAddress[5], ...config } as UseContractReadConfig<
    typeof budgetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"ROOT_BUDGET_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetRootBudgetPermissionId<
  TFunctionName extends 'ROOT_BUDGET_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'ROOT_BUDGET_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"allowances"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowances<
  TFunctionName extends 'allowances',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'allowances',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"allowancesCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowancesCount<
  TFunctionName extends 'allowancesCount',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'allowancesCount',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"dao"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"implementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"isAdminOnAllowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetIsAdminOnAllowance<
  TFunctionName extends 'isAdminOnAllowance',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'isAdminOnAllowance',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"pluginType"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"protocolVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof budgetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return useContractRead({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof budgetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof budgetABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, TFunctionName, TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"createAllowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetCreateAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'createAllowance'>['request']['abi'],
        'createAllowance',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createAllowance' }
    : UseContractWriteConfig<typeof budgetABI, 'createAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'createAllowance', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'createAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"debitAllowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetDebitAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'debitAllowance'>['request']['abi'],
        'debitAllowance',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'debitAllowance' }
    : UseContractWriteConfig<typeof budgetABI, 'debitAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'debitAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'debitAllowance', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'debitAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"executeMultiPayment"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetExecuteMultiPayment<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'executeMultiPayment'>['request']['abi'],
        'executeMultiPayment',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'executeMultiPayment' }
    : UseContractWriteConfig<typeof budgetABI, 'executeMultiPayment', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'executeMultiPayment'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'executeMultiPayment', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'executeMultiPayment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"executePayment"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetExecutePayment<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'executePayment'>['request']['abi'],
        'executePayment',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'executePayment' }
    : UseContractWriteConfig<typeof budgetABI, 'executePayment', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'executePayment'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'executePayment', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'executePayment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof budgetABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'initialize', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceAmount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetSetAllowanceAmount<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'setAllowanceAmount'>['request']['abi'],
        'setAllowanceAmount',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAllowanceAmount' }
    : UseContractWriteConfig<typeof budgetABI, 'setAllowanceAmount', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAllowanceAmount'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'setAllowanceAmount', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceAmount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceName"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetSetAllowanceName<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'setAllowanceName'>['request']['abi'],
        'setAllowanceName',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAllowanceName' }
    : UseContractWriteConfig<typeof budgetABI, 'setAllowanceName', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAllowanceName'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'setAllowanceName', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceSpender"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetSetAllowanceSpender<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'setAllowanceSpender'>['request']['abi'],
        'setAllowanceSpender',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAllowanceSpender' }
    : UseContractWriteConfig<typeof budgetABI, 'setAllowanceSpender', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAllowanceSpender'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'setAllowanceSpender', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceSpender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceState"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetSetAllowanceState<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'setAllowanceState'>['request']['abi'],
        'setAllowanceState',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAllowanceState' }
    : UseContractWriteConfig<typeof budgetABI, 'setAllowanceState', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAllowanceState'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'setAllowanceState', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceState',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof budgetABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'upgradeTo', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof budgetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof budgetABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof budgetABI, 'upgradeToAndCall', TMode>({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof budgetABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"createAllowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetCreateAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'createAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'createAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'createAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"debitAllowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetDebitAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'debitAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'debitAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'debitAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"executeMultiPayment"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetExecuteMultiPayment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'executeMultiPayment'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'executeMultiPayment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'executeMultiPayment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"executePayment"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetExecutePayment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'executePayment'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'executePayment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'executePayment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof budgetABI, 'initialize'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceAmount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetSetAllowanceAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceAmount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceAmount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceAmount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceName"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetSetAllowanceName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceName'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceSpender"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetSetAllowanceSpender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceSpender'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceSpender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceSpender'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"setAllowanceState"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetSetAllowanceState(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceState'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'setAllowanceState',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'setAllowanceState'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof budgetABI, 'upgradeTo'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function usePrepareBudgetUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof budgetAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetABI,
    address: budgetAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof budgetABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({ abi: budgetABI, address: budgetAddress[5], ...config } as UseContractEventConfig<
    typeof budgetABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AdminChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceAmountChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceAmountChangedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceAmountChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceAmountChanged',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceAmountChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceCreatedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceCreated'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceCreated',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceDebited"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceDebitedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceDebited'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceDebited',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceDebited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceNameChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceNameChangedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceNameChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceNameChanged',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceNameChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceSpenderChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceSpenderChangedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceSpenderChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceSpenderChanged',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceSpenderChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"AllowanceStateChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetAllowanceStateChangedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'AllowanceStateChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'AllowanceStateChanged',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'AllowanceStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'BeaconUpgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetInitializedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'Initialized'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"MultiPaymentExecuted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetMultiPaymentExecutedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'MultiPaymentExecuted'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'MultiPaymentExecuted',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'MultiPaymentExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"PaymentExecuted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetPaymentExecutedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'PaymentExecuted'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'PaymentExecuted',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'PaymentExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link budgetABI}__ and `eventName` set to `"Upgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xfea7C89Ae8168f0f0FB9bA053b79C02819eC8C91)
 */
export function useBudgetUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof budgetABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof budgetAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: budgetABI,
    address: budgetAddress[5],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof budgetABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetSetupABI}__.
 */
export function useBudgetSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof budgetSetupABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: budgetSetupABI, ...config } as UseContractReadConfig<
    typeof budgetSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useBudgetSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof budgetSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: budgetSetupABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof budgetSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useBudgetSetupPrepareUninstallation<
  TFunctionName extends 'prepareUninstallation',
  TSelectData = ReadContractResult<typeof budgetSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: budgetSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function useBudgetSetupProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof budgetSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: budgetSetupABI, functionName: 'protocolVersion', ...config } as UseContractReadConfig<
    typeof budgetSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBudgetSetupSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof budgetSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof budgetSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: budgetSetupABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof budgetSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetSetupABI}__.
 */
export function useBudgetSetupWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetSetupABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof budgetSetupABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof budgetSetupABI, TFunctionName, TMode>({ abi: budgetSetupABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useBudgetSetupPrepareInstallation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetSetupABI, 'prepareInstallation'>['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<typeof budgetSetupABI, 'prepareInstallation', TMode> & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof budgetSetupABI, 'prepareInstallation', TMode>({
    abi: budgetSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useBudgetSetupPrepareUpdate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof budgetSetupABI, 'prepareUpdate'>['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof budgetSetupABI, 'prepareUpdate', TMode> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof budgetSetupABI, 'prepareUpdate', TMode>({
    abi: budgetSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetSetupABI}__.
 */
export function usePrepareBudgetSetupWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof budgetSetupABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: budgetSetupABI, ...config } as UsePrepareContractWriteConfig<
    typeof budgetSetupABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareBudgetSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetSetupABI, 'prepareInstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetSetupABI, 'prepareInstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link budgetSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareBudgetSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof budgetSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: budgetSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof budgetSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__.
 */
export function useCallbackHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof callbackHandlerABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: callbackHandlerABI, ...config } as UseContractEventConfig<
    typeof callbackHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__ and `eventName` set to `"CallbackReceived"`.
 */
export function useCallbackHandlerCallbackReceivedEvent(
  config: Omit<UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: callbackHandlerABI,
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: contextUpgradeableABI, ...config } as UseContractEventConfig<
    typeof contextUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: contextUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof contextUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({ abi: daoABI, address: daoAddress[5], ...config } as UseContractReadConfig<
    typeof daoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"EXECUTE_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoExecutePermissionId<
  TFunctionName extends 'EXECUTE_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'EXECUTE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"REGISTER_STANDARD_CALLBACK_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRegisterStandardCallbackPermissionId<
  TFunctionName extends 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_METADATA_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetMetadataPermissionId<
  TFunctionName extends 'SET_METADATA_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'SET_METADATA_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_TRUSTED_FORWARDER_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetTrustedForwarderPermissionId<
  TFunctionName extends 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"UPGRADE_DAO_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoUpgradeDaoPermissionId<
  TFunctionName extends 'UPGRADE_DAO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'UPGRADE_DAO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"VALIDATE_SIGNATURE_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoValidateSignaturePermissionId<
  TFunctionName extends 'VALIDATE_SIGNATURE_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'VALIDATE_SIGNATURE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"daoURI"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoDaoUri<
  TFunctionName extends 'daoURI',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'daoURI',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"hasPermission"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isGranted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isValidSignature"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"protocolVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setSignatureValidator"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetSignatureValidator<
  TFunctionName extends 'setSignatureValidator',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setSignatureValidator',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof daoABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, TFunctionName, TMode>({
    abi: daoABI,
    address: daoAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoApplyMultiTargetPermissions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'applyMultiTargetPermissions'>['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<typeof daoABI, 'applyMultiTargetPermissions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'applyMultiTargetPermissions', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoApplySingleTargetPermissions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'applySingleTargetPermissions'>['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<typeof daoABI, 'applySingleTargetPermissions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'applySingleTargetPermissions', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoDeposit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<typeof daoABI, 'deposit', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'deposit', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoExecute<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'execute' }
    : UseContractWriteConfig<typeof daoABI, 'execute', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'execute', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoGrant<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof daoABI, 'grant'>['request']['abi'], 'grant', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'grant'
      }
    : UseContractWriteConfig<typeof daoABI, 'grant', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'grant', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoGrantWithCondition<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'grantWithCondition'>['request']['abi'],
        'grantWithCondition',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<typeof daoABI, 'grantWithCondition', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'grantWithCondition', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof daoABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'initialize', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initializeFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoInitializeFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'initializeFrom'>['request']['abi'],
        'initializeFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initializeFrom' }
    : UseContractWriteConfig<typeof daoABI, 'initializeFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeFrom'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'initializeFrom', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'initializeFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRegisterStandardCallback<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'registerStandardCallback'>['request']['abi'],
        'registerStandardCallback',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<typeof daoABI, 'registerStandardCallback', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'registerStandardCallback', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRevoke<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof daoABI, 'revoke'>['request']['abi'], 'revoke', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'revoke'
      }
    : UseContractWriteConfig<typeof daoABI, 'revoke', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'revoke', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetDaoUri<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'setDaoURI'>['request']['abi'],
        'setDaoURI',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setDaoURI' }
    : UseContractWriteConfig<typeof daoABI, 'setDaoURI', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setDaoURI'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setDaoURI', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setDaoURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetMetadata<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'setMetadata'>['request']['abi'],
        'setMetadata',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof daoABI, 'setMetadata', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setMetadata', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoSetTrustedForwarder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'setTrustedForwarder'>['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<typeof daoABI, 'setTrustedForwarder', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'setTrustedForwarder', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof daoABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'upgradeTo', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof daoABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof daoABI, 'upgradeToAndCall', TMode>({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({ abi: daoABI, address: daoAddress[5], ...config } as UsePrepareContractWriteConfig<
    typeof daoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'applyMultiTargetPermissions'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'applyMultiTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'applySingleTargetPermissions'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'applySingleTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoDeposit(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'execute'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoGrant(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'grant'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initializeFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoInitializeFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'initializeFrom'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'initializeFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'initializeFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoRevoke(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoSetDaoUri(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setDaoURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoSetMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function usePrepareDaoUpgradeToAndCall(
  config: Omit<UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    address: daoAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof daoABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({ abi: daoABI, address: daoAddress[5], ...config } as UseContractEventConfig<
    typeof daoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'AdminChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"CallbackReceived"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoCallbackReceivedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'CallbackReceived'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Deposited"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoDepositedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Deposited'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Executed"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoExecutedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Executed'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Granted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoGrantedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Granted'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoInitializedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Initialized'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"MetadataSet"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoMetadataSetEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'MetadataSet'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoNativeTokenDepositedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'NativeTokenDeposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NewURI"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoNewUriEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'NewURI'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'NewURI',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NewURI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Revoked"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoRevokedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Revoked'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoStandardCallbackRegisteredEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoTrustedForwarderSetEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'TrustedForwarderSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Upgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x970fed12e8816aa4e5d57b9ccf66263de8732a0d)
 */
export function useDaoUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof daoABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof daoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    address: daoAddress[5],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__.
 */
export function useDaoMockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: daoMockABI, ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function useDaoMockRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'ROOT_PERMISSION_ID', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useDaoMockGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'getTrustedForwarder', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useDaoMockHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'hasPermission', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"isGranted"`.
 */
export function useDaoMockIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'isGranted', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useDaoMockIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'isValidSignature', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"pastVotes"`.
 */
export function useDaoMockPastVotes<
  TFunctionName extends 'pastVotes',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'pastVotes', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useDaoMockTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof daoMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoMockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: daoMockABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof daoMockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__.
 */
export function useDaoMockWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof daoMockABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, TFunctionName, TMode>({ abi: daoMockABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function useDaoMockApplyMultiTargetPermissions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'applyMultiTargetPermissions'>['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<typeof daoMockABI, 'applyMultiTargetPermissions', TMode> & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'applyMultiTargetPermissions', TMode>({
    abi: daoMockABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function useDaoMockApplySingleTargetPermissions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'applySingleTargetPermissions'>['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<typeof daoMockABI, 'applySingleTargetPermissions', TMode> & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'applySingleTargetPermissions', TMode>({
    abi: daoMockABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"deposit"`.
 */
export function useDaoMockDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof daoMockABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'deposit', TMode>({
    abi: daoMockABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"execute"`.
 */
export function useDaoMockExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof daoMockABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'execute', TMode>({
    abi: daoMockABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"grant"`.
 */
export function useDaoMockGrant<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'grant'>['request']['abi'],
        'grant',
        TMode
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<typeof daoMockABI, 'grant', TMode> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'grant', TMode>({
    abi: daoMockABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function useDaoMockGrantWithCondition<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'grantWithCondition'>['request']['abi'],
        'grantWithCondition',
        TMode
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<typeof daoMockABI, 'grantWithCondition', TMode> & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'grantWithCondition', TMode>({
    abi: daoMockABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useDaoMockRegisterStandardCallback<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'registerStandardCallback'>['request']['abi'],
        'registerStandardCallback',
        TMode
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<typeof daoMockABI, 'registerStandardCallback', TMode> & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'registerStandardCallback', TMode>({
    abi: daoMockABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"revoke"`.
 */
export function useDaoMockRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof daoMockABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'revoke', TMode>({
    abi: daoMockABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useDaoMockSetMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'setMetadata'>['request']['abi'],
        'setMetadata',
        TMode
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof daoMockABI, 'setMetadata', TMode> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'setMetadata', TMode>({
    abi: daoMockABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useDaoMockSetSignatureValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'setSignatureValidator'>['request']['abi'],
        'setSignatureValidator',
        TMode
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<typeof daoMockABI, 'setSignatureValidator', TMode> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'setSignatureValidator', TMode>({
    abi: daoMockABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useDaoMockSetTrustedForwarder<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoMockABI, 'setTrustedForwarder'>['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<typeof daoMockABI, 'setTrustedForwarder', TMode> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<typeof daoMockABI, 'setTrustedForwarder', TMode>({
    abi: daoMockABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__.
 */
export function usePrepareDaoMockWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: daoMockABI, ...config } as UsePrepareContractWriteConfig<
    typeof daoMockABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePrepareDaoMockApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'applyMultiTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'applyMultiTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePrepareDaoMockApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'applySingleTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'applySingleTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareDaoMockDeposit(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, 'deposit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareDaoMockExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, 'execute'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"grant"`.
 */
export function usePrepareDaoMockGrant(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, 'grant'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: daoMockABI, functionName: 'grant', ...config } as UsePrepareContractWriteConfig<
    typeof daoMockABI,
    'grant'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePrepareDaoMockGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'grantWithCondition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareDaoMockRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'registerStandardCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareDaoMockRevoke(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, 'revoke'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareDaoMockSetMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof daoMockABI, 'setMetadata'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareDaoMockSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoMockABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareDaoMockSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoMockABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoMockABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoMockABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__.
 */
export function useDaoMockEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof daoMockABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, ...config } as UseContractEventConfig<typeof daoMockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"Deposited"`.
 */
export function useDaoMockDepositedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'Deposited'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'Deposited', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'Deposited'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"Executed"`.
 */
export function useDaoMockExecutedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'Executed'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'Executed', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'Executed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"Granted"`.
 */
export function useDaoMockGrantedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'Granted'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'Granted', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'Granted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoMockInitializedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useDaoMockMetadataSetEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'MetadataSet'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'MetadataSet', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'MetadataSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useDaoMockNativeTokenDepositedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'NativeTokenDeposited'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'NativeTokenDeposited', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'NativeTokenDeposited'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"Revoked"`.
 */
export function useDaoMockRevokedEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'Revoked'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'Revoked', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'Revoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useDaoMockStandardCallbackRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof daoMockABI, 'StandardCallbackRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoMockABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof daoMockABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoMockABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useDaoMockTrustedForwarderSetEvent(
  config: Omit<UseContractEventConfig<typeof daoMockABI, 'TrustedForwarderSet'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: daoMockABI, eventName: 'TrustedForwarderSet', ...config } as UseContractEventConfig<
    typeof daoMockABI,
    'TrustedForwarderSet'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoAuthorizableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoAuthorizableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: daoAuthorizableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function useDaoAuthorizableUpgradeableDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof daoAuthorizableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoAuthorizableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoAuthorizableUpgradeableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof daoAuthorizableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: daoAuthorizableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof daoAuthorizableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoAuthorizableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoAuthorizableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ensABI, ...config } as UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useEnsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ensABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"owner"`.
 */
export function useEnsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ensABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"recordExists"`.
 */
export function useEnsRecordExists<
  TFunctionName extends 'recordExists',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ensABI, functionName: 'recordExists', ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"resolver"`.
 */
export function useEnsResolver<
  TFunctionName extends 'resolver',
  TSelectData = ReadContractResult<typeof ensABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ensABI, functionName: 'resolver', ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"ttl"`.
 */
export function useEnsTtl<TFunctionName extends 'ttl', TSelectData = ReadContractResult<typeof ensABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ensABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ensABI, functionName: 'ttl', ...config } as UseContractReadConfig<
    typeof ensABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ensABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ensABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, TFunctionName, TMode>({ abi: ensABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useEnsSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ensABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setApprovalForAll', TMode>({
    abi: ensABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setOwner"`.
 */
export function useEnsSetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setOwner'>['request']['abi'],
        'setOwner',
        TMode
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof ensABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setOwner', TMode>({ abi: ensABI, functionName: 'setOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setRecord"`.
 */
export function useEnsSetRecord<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setRecord'>['request']['abi'],
        'setRecord',
        TMode
      > & { functionName?: 'setRecord' }
    : UseContractWriteConfig<typeof ensABI, 'setRecord', TMode> & {
        abi?: never
        functionName?: 'setRecord'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setRecord', TMode>({
    abi: ensABI,
    functionName: 'setRecord',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setResolver"`.
 */
export function useEnsSetResolver<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setResolver'>['request']['abi'],
        'setResolver',
        TMode
      > & { functionName?: 'setResolver' }
    : UseContractWriteConfig<typeof ensABI, 'setResolver', TMode> & {
        abi?: never
        functionName?: 'setResolver'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setResolver', TMode>({
    abi: ensABI,
    functionName: 'setResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeOwner"`.
 */
export function useEnsSetSubnodeOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setSubnodeOwner'>['request']['abi'],
        'setSubnodeOwner',
        TMode
      > & { functionName?: 'setSubnodeOwner' }
    : UseContractWriteConfig<typeof ensABI, 'setSubnodeOwner', TMode> & {
        abi?: never
        functionName?: 'setSubnodeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setSubnodeOwner', TMode>({
    abi: ensABI,
    functionName: 'setSubnodeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeRecord"`.
 */
export function useEnsSetSubnodeRecord<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensABI, 'setSubnodeRecord'>['request']['abi'],
        'setSubnodeRecord',
        TMode
      > & { functionName?: 'setSubnodeRecord' }
    : UseContractWriteConfig<typeof ensABI, 'setSubnodeRecord', TMode> & {
        abi?: never
        functionName?: 'setSubnodeRecord'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setSubnodeRecord', TMode>({
    abi: ensABI,
    functionName: 'setSubnodeRecord',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setTTL"`.
 */
export function useEnsSetTtl<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ensABI, 'setTTL'>['request']['abi'], 'setTTL', TMode> & {
        functionName?: 'setTTL'
      }
    : UseContractWriteConfig<typeof ensABI, 'setTTL', TMode> & {
        abi?: never
        functionName?: 'setTTL'
      } = {} as any,
) {
  return useContractWrite<typeof ensABI, 'setTTL', TMode>({ abi: ensABI, functionName: 'setTTL', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__.
 */
export function usePrepareEnsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ensABI, ...config } as UsePrepareContractWriteConfig<
    typeof ensABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareEnsSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareEnsSetOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setOwner'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ensABI, functionName: 'setOwner', ...config } as UsePrepareContractWriteConfig<
    typeof ensABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setRecord"`.
 */
export function usePrepareEnsSetRecord(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setRecord'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ensABI, functionName: 'setRecord', ...config } as UsePrepareContractWriteConfig<
    typeof ensABI,
    'setRecord'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setResolver"`.
 */
export function usePrepareEnsSetResolver(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setResolver'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setResolver',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setResolver'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeOwner"`.
 */
export function usePrepareEnsSetSubnodeOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeOwner'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setSubnodeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setSubnodeRecord"`.
 */
export function usePrepareEnsSetSubnodeRecord(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeRecord'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensABI,
    functionName: 'setSubnodeRecord',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensABI, 'setSubnodeRecord'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensABI}__ and `functionName` set to `"setTTL"`.
 */
export function usePrepareEnsSetTtl(
  config: Omit<UsePrepareContractWriteConfig<typeof ensABI, 'setTTL'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ensABI, functionName: 'setTTL', ...config } as UsePrepareContractWriteConfig<
    typeof ensABI,
    'setTTL'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__.
 */
export function useEnsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ensABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, ...config } as UseContractEventConfig<typeof ensABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useEnsApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ensABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ensABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewOwner"`.
 */
export function useEnsNewOwnerEvent(
  config: Omit<UseContractEventConfig<typeof ensABI, 'NewOwner'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, eventName: 'NewOwner', ...config } as UseContractEventConfig<
    typeof ensABI,
    'NewOwner'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewResolver"`.
 */
export function useEnsNewResolverEvent(
  config: Omit<UseContractEventConfig<typeof ensABI, 'NewResolver'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, eventName: 'NewResolver', ...config } as UseContractEventConfig<
    typeof ensABI,
    'NewResolver'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"NewTTL"`.
 */
export function useEnsNewTtlEvent(
  config: Omit<UseContractEventConfig<typeof ensABI, 'NewTTL'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, eventName: 'NewTTL', ...config } as UseContractEventConfig<
    typeof ensABI,
    'NewTTL'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensABI}__ and `eventName` set to `"Transfer"`.
 */
export function useEnsTransferEvent(
  config: Omit<UseContractEventConfig<typeof ensABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ensABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ensSubdomainRegistrarABI, ...config } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"REGISTER_ENS_SUBDOMAIN_PERMISSION_ID"`.
 */
export function useEnsSubdomainRegistrarRegisterEnsSubdomainPermissionId<
  TFunctionName extends 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'REGISTER_ENS_SUBDOMAIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"UPGRADE_REGISTRAR_PERMISSION_ID"`.
 */
export function useEnsSubdomainRegistrarUpgradeRegistrarPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRAR_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'UPGRADE_REGISTRAR_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"dao"`.
 */
export function useEnsSubdomainRegistrarDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ensSubdomainRegistrarABI, functionName: 'dao', ...config } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"ens"`.
 */
export function useEnsSubdomainRegistrarEns<
  TFunctionName extends 'ens',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ensSubdomainRegistrarABI, functionName: 'ens', ...config } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"node"`.
 */
export function useEnsSubdomainRegistrarNode<
  TFunctionName extends 'node',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ensSubdomainRegistrarABI, functionName: 'node', ...config } as UseContractReadConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function useEnsSubdomainRegistrarProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useEnsSubdomainRegistrarProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"resolver"`.
 */
export function useEnsSubdomainRegistrarResolver<
  TFunctionName extends 'resolver',
  TSelectData = ReadContractResult<typeof ensSubdomainRegistrarABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ensSubdomainRegistrarABI,
    functionName: 'resolver',
    ...config,
  } as UseContractReadConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, TFunctionName, TMode>({
    abi: ensSubdomainRegistrarABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"initialize"`.
 */
export function useEnsSubdomainRegistrarInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'initialize', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"registerSubnode"`.
 */
export function useEnsSubdomainRegistrarRegisterSubnode<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, 'registerSubnode'>['request']['abi'],
        'registerSubnode',
        TMode
      > & { functionName?: 'registerSubnode' }
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, 'registerSubnode', TMode> & {
        abi?: never
        functionName?: 'registerSubnode'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'registerSubnode', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'registerSubnode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"setDefaultResolver"`.
 */
export function useEnsSubdomainRegistrarSetDefaultResolver<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, 'setDefaultResolver'>['request']['abi'],
        'setDefaultResolver',
        TMode
      > & { functionName?: 'setDefaultResolver' }
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, 'setDefaultResolver', TMode> & {
        abi?: never
        functionName?: 'setDefaultResolver'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'setDefaultResolver', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'setDefaultResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useEnsSubdomainRegistrarUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'upgradeTo', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useEnsSubdomainRegistrarUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ensSubdomainRegistrarABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof ensSubdomainRegistrarABI, 'upgradeToAndCall', TMode>({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function usePrepareEnsSubdomainRegistrarWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ensSubdomainRegistrarABI, ...config } as UsePrepareContractWriteConfig<
    typeof ensSubdomainRegistrarABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareEnsSubdomainRegistrarInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"registerSubnode"`.
 */
export function usePrepareEnsSubdomainRegistrarRegisterSubnode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'registerSubnode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'registerSubnode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'registerSubnode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"setDefaultResolver"`.
 */
export function usePrepareEnsSubdomainRegistrarSetDefaultResolver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'setDefaultResolver'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'setDefaultResolver',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'setDefaultResolver'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareEnsSubdomainRegistrarUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareEnsSubdomainRegistrarUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ensSubdomainRegistrarABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ensSubdomainRegistrarABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__.
 */
export function useEnsSubdomainRegistrarEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ensSubdomainRegistrarABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ensSubdomainRegistrarABI, ...config } as UseContractEventConfig<
    typeof ensSubdomainRegistrarABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useEnsSubdomainRegistrarAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useEnsSubdomainRegistrarBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEnsSubdomainRegistrarInitializedEvent(
  config: Omit<UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: ensSubdomainRegistrarABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ensSubdomainRegistrarABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useEnsSubdomainRegistrarUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ensSubdomainRegistrarABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ensSubdomainRegistrarABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof ensSubdomainRegistrarABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165StorageUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165StorageUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165StorageUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc165StorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165StorageUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165StorageUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165StorageUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165StorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165StorageUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc165StorageUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc165StorageUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc165StorageUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165StorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165StorageUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165StorageUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165StorageUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc165UpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc165UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc165UpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc165UpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__.
 */
export function useErc1967ProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967ProxyABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc1967ProxyABI, ...config } as UseContractEventConfig<
    typeof erc1967ProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967ProxyAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967ProxyABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof erc1967ProxyABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967ProxyBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967ProxyABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof erc1967ProxyABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967ProxyUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967ProxyABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof erc1967ProxyABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc1967UpgradeABI, ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iabiResolverABI}__.
 */
export function useIabiResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iabiResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iabiResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iabiResolverABI, ...config } as UseContractReadConfig<
    typeof iabiResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iabiResolverABI}__ and `functionName` set to `"ABI"`.
 */
export function useIabiResolverAbi<
  TFunctionName extends 'ABI',
  TSelectData = ReadContractResult<typeof iabiResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iabiResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iabiResolverABI, functionName: 'ABI', ...config } as UseContractReadConfig<
    typeof iabiResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iabiResolverABI}__.
 */
export function useIabiResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iabiResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iabiResolverABI, ...config } as UseContractEventConfig<
    typeof iabiResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iabiResolverABI}__ and `eventName` set to `"ABIChanged"`.
 */
export function useIabiResolverAbiChangedEvent(
  config: Omit<UseContractEventConfig<typeof iabiResolverABI, 'ABIChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iabiResolverABI, eventName: 'ABIChanged', ...config } as UseContractEventConfig<
    typeof iabiResolverABI,
    'ABIChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddrResolverABI}__.
 */
export function useIAddrResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAddrResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iAddrResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iAddrResolverABI, ...config } as UseContractReadConfig<
    typeof iAddrResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddrResolverABI}__ and `functionName` set to `"addr"`.
 */
export function useIAddrResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof iAddrResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAddrResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iAddrResolverABI, functionName: 'addr', ...config } as UseContractReadConfig<
    typeof iAddrResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddrResolverABI}__.
 */
export function useIAddrResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAddrResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iAddrResolverABI, ...config } as UseContractEventConfig<
    typeof iAddrResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddrResolverABI}__ and `eventName` set to `"AddrChanged"`.
 */
export function useIAddrResolverAddrChangedEvent(
  config: Omit<UseContractEventConfig<typeof iAddrResolverABI, 'AddrChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iAddrResolverABI, eventName: 'AddrChanged', ...config } as UseContractEventConfig<
    typeof iAddrResolverABI,
    'AddrChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddressResolverABI}__.
 */
export function useIAddressResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAddressResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iAddressResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iAddressResolverABI, ...config } as UseContractReadConfig<
    typeof iAddressResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAddressResolverABI}__ and `functionName` set to `"addr"`.
 */
export function useIAddressResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof iAddressResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAddressResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iAddressResolverABI, functionName: 'addr', ...config } as UseContractReadConfig<
    typeof iAddressResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddressResolverABI}__.
 */
export function useIAddressResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAddressResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iAddressResolverABI, ...config } as UseContractEventConfig<
    typeof iAddressResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAddressResolverABI}__ and `eventName` set to `"AddressChanged"`.
 */
export function useIAddressResolverAddressChangedEvent(
  config: Omit<UseContractEventConfig<typeof iAddressResolverABI, 'AddressChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: iAddressResolverABI,
    eventName: 'AddressChanged',
    ...config,
  } as UseContractEventConfig<typeof iAddressResolverABI, 'AddressChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iBeaconABI, ...config } as UseContractReadConfig<
    typeof iBeaconABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iBeaconABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof iBeaconABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iBeaconUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iContentHashResolverABI}__.
 */
export function useIContentHashResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iContentHashResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iContentHashResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iContentHashResolverABI, ...config } as UseContractReadConfig<
    typeof iContentHashResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iContentHashResolverABI}__ and `functionName` set to `"contenthash"`.
 */
export function useIContentHashResolverContenthash<
  TFunctionName extends 'contenthash',
  TSelectData = ReadContractResult<typeof iContentHashResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iContentHashResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iContentHashResolverABI,
    functionName: 'contenthash',
    ...config,
  } as UseContractReadConfig<typeof iContentHashResolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iContentHashResolverABI}__.
 */
export function useIContentHashResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iContentHashResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iContentHashResolverABI, ...config } as UseContractEventConfig<
    typeof iContentHashResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iContentHashResolverABI}__ and `eventName` set to `"ContenthashChanged"`.
 */
export function useIContentHashResolverContenthashChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iContentHashResolverABI, 'ContenthashChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iContentHashResolverABI,
    eventName: 'ContenthashChanged',
    ...config,
  } as UseContractEventConfig<typeof iContentHashResolverABI, 'ContenthashChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: idaoABI, ...config } as UseContractReadConfig<
    typeof idaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useIdaoGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: idaoABI, functionName: 'getTrustedForwarder', ...config } as UseContractReadConfig<
    typeof idaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useIdaoHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: idaoABI, functionName: 'hasPermission', ...config } as UseContractReadConfig<
    typeof idaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof idaoABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof idaoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, TFunctionName, TMode>({ abi: idaoABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function useIdaoDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof idaoABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'deposit', TMode>({ abi: idaoABI, functionName: 'deposit', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function useIdaoExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof idaoABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'execute', TMode>({ abi: idaoABI, functionName: 'execute', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIdaoIsValidSignature<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'isValidSignature'>['request']['abi'],
        'isValidSignature',
        TMode
      > & { functionName?: 'isValidSignature' }
    : UseContractWriteConfig<typeof idaoABI, 'isValidSignature', TMode> & {
        abi?: never
        functionName?: 'isValidSignature'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'isValidSignature', TMode>({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useIdaoRegisterStandardCallback<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'registerStandardCallback'>['request']['abi'],
        'registerStandardCallback',
        TMode
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<typeof idaoABI, 'registerStandardCallback', TMode> & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'registerStandardCallback', TMode>({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useIdaoSetMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'setMetadata'>['request']['abi'],
        'setMetadata',
        TMode
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof idaoABI, 'setMetadata', TMode> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setMetadata', TMode>({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useIdaoSetSignatureValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'setSignatureValidator'>['request']['abi'],
        'setSignatureValidator',
        TMode
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<typeof idaoABI, 'setSignatureValidator', TMode> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setSignatureValidator', TMode>({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useIdaoSetTrustedForwarder<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof idaoABI, 'setTrustedForwarder'>['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<typeof idaoABI, 'setTrustedForwarder', TMode> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<typeof idaoABI, 'setTrustedForwarder', TMode>({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function usePrepareIdaoWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof idaoABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: idaoABI, ...config } as UsePrepareContractWriteConfig<
    typeof idaoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIdaoDeposit(
  config: Omit<UsePrepareContractWriteConfig<typeof idaoABI, 'deposit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: idaoABI, functionName: 'deposit', ...config } as UsePrepareContractWriteConfig<
    typeof idaoABI,
    'deposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIdaoExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof idaoABI, 'execute'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: idaoABI, functionName: 'execute', ...config } as UsePrepareContractWriteConfig<
    typeof idaoABI,
    'execute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function usePrepareIdaoIsValidSignature(
  config: Omit<UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareIdaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'registerStandardCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareIdaoSetMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareIdaoSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareIdaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof idaoABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, ...config } as UseContractEventConfig<typeof idaoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIdaoDepositedEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'Deposited'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, eventName: 'Deposited', ...config } as UseContractEventConfig<
    typeof idaoABI,
    'Deposited'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Executed"`.
 */
export function useIdaoExecutedEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'Executed'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, eventName: 'Executed', ...config } as UseContractEventConfig<
    typeof idaoABI,
    'Executed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useIdaoMetadataSetEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'MetadataSet'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, eventName: 'MetadataSet', ...config } as UseContractEventConfig<
    typeof idaoABI,
    'MetadataSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useIdaoNativeTokenDepositedEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'NativeTokenDeposited'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, eventName: 'NativeTokenDeposited', ...config } as UseContractEventConfig<
    typeof idaoABI,
    'NativeTokenDeposited'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useIdaoStandardCallbackRegisteredEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useIdaoTrustedForwarderSetEvent(
  config: Omit<UseContractEventConfig<typeof idaoABI, 'TrustedForwarderSet'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: idaoABI, eventName: 'TrustedForwarderSet', ...config } as UseContractEventConfig<
    typeof idaoABI,
    'TrustedForwarderSet'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsRecordResolverABI}__.
 */
export function useIdnsRecordResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idnsRecordResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof idnsRecordResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: idnsRecordResolverABI, ...config } as UseContractReadConfig<
    typeof idnsRecordResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `functionName` set to `"dnsRecord"`.
 */
export function useIdnsRecordResolverDnsRecord<
  TFunctionName extends 'dnsRecord',
  TSelectData = ReadContractResult<typeof idnsRecordResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idnsRecordResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: idnsRecordResolverABI, functionName: 'dnsRecord', ...config } as UseContractReadConfig<
    typeof idnsRecordResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__.
 */
export function useIdnsRecordResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof idnsRecordResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: idnsRecordResolverABI, ...config } as UseContractEventConfig<
    typeof idnsRecordResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `eventName` set to `"DNSRecordChanged"`.
 */
export function useIdnsRecordResolverDnsRecordChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsRecordResolverABI,
    eventName: 'DNSRecordChanged',
    ...config,
  } as UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsRecordResolverABI}__ and `eventName` set to `"DNSRecordDeleted"`.
 */
export function useIdnsRecordResolverDnsRecordDeletedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordDeleted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsRecordResolverABI,
    eventName: 'DNSRecordDeleted',
    ...config,
  } as UseContractEventConfig<typeof idnsRecordResolverABI, 'DNSRecordDeleted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsZoneResolverABI}__.
 */
export function useIdnsZoneResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idnsZoneResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof idnsZoneResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: idnsZoneResolverABI, ...config } as UseContractReadConfig<
    typeof idnsZoneResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idnsZoneResolverABI}__ and `functionName` set to `"zonehash"`.
 */
export function useIdnsZoneResolverZonehash<
  TFunctionName extends 'zonehash',
  TSelectData = ReadContractResult<typeof idnsZoneResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idnsZoneResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: idnsZoneResolverABI, functionName: 'zonehash', ...config } as UseContractReadConfig<
    typeof idnsZoneResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsZoneResolverABI}__.
 */
export function useIdnsZoneResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof idnsZoneResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: idnsZoneResolverABI, ...config } as UseContractEventConfig<
    typeof idnsZoneResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idnsZoneResolverABI}__ and `eventName` set to `"DNSZonehashChanged"`.
 */
export function useIdnsZoneResolverDnsZonehashChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof idnsZoneResolverABI, 'DNSZonehashChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idnsZoneResolverABI,
    eventName: 'DNSZonehashChanged',
    ...config,
  } as UseContractEventConfig<typeof idnsZoneResolverABI, 'DNSZonehashChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__.
 */
export function useIeip4824Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ieip4824ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ieip4824ABI, ...config } as UseContractReadConfig<
    typeof ieip4824ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__ and `functionName` set to `"daoURI"`.
 */
export function useIeip4824DaoUri<
  TFunctionName extends 'daoURI',
  TSelectData = ReadContractResult<typeof ieip4824ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ieip4824ABI, functionName: 'daoURI', ...config } as UseContractReadConfig<
    typeof ieip4824ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc1155ReceiverUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TMode>({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155BatchReceived<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived', TMode>({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received', TMode>({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc1155ReceiverUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc1155ReceiverUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc1155UpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155UpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, TFunctionName, TMode>({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'safeTransferFrom', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155UpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'setApprovalForAll', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function usePrepareIerc1155UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc1155UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155UpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155UpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    'URI'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1271ABI, ...config } as UseContractReadConfig<
    typeof ierc1271ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIerc1271IsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc1271ABI, functionName: 'isValidSignature', ...config } as UseContractReadConfig<
    typeof ierc1271ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967ABI, ...config } as UseContractEventConfig<typeof ierc1967ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967AdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967BeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__.
 */
export function useIerc1967UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1967UpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc1967UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967UpgradeableAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967UpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc1967UpgradeableABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof ierc1967UpgradeableABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({ abi: ierc20MetadataABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({ abi: ierc20PermitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'permit', TMode>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc20PermitUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode>({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, 'permit', TMode>({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20PermitUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20UpgradeableABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20UpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20UpgradeableABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, TFunctionName, TMode>({
    abi: ierc20UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'approve', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transfer', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc20UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20UpgradeableABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20UpgradeableABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20UpgradeableABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20UpgradeableABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ReceiverUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ReceiverUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverUpgradeableABI, TFunctionName, TMode>({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ReceiverUpgradeableABI, 'onERC721Received'>['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof ierc721ReceiverUpgradeableABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverUpgradeableABI, 'onERC721Received', TMode>({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ReceiverUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ReceiverUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverUpgradeableABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverUpgradeableABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iExtendedResolverABI}__.
 */
export function useIExtendedResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iExtendedResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iExtendedResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iExtendedResolverABI, ...config } as UseContractReadConfig<
    typeof iExtendedResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iExtendedResolverABI}__ and `functionName` set to `"resolve"`.
 */
export function useIExtendedResolverResolve<
  TFunctionName extends 'resolve',
  TSelectData = ReadContractResult<typeof iExtendedResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iExtendedResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iExtendedResolverABI, functionName: 'resolve', ...config } as UseContractReadConfig<
    typeof iExtendedResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInterfaceResolverABI}__.
 */
export function useIInterfaceResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iInterfaceResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iInterfaceResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iInterfaceResolverABI, ...config } as UseContractReadConfig<
    typeof iInterfaceResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInterfaceResolverABI}__ and `functionName` set to `"interfaceImplementer"`.
 */
export function useIInterfaceResolverInterfaceImplementer<
  TFunctionName extends 'interfaceImplementer',
  TSelectData = ReadContractResult<typeof iInterfaceResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iInterfaceResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInterfaceResolverABI,
    functionName: 'interfaceImplementer',
    ...config,
  } as UseContractReadConfig<typeof iInterfaceResolverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInterfaceResolverABI}__.
 */
export function useIInterfaceResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iInterfaceResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iInterfaceResolverABI, ...config } as UseContractEventConfig<
    typeof iInterfaceResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInterfaceResolverABI}__ and `eventName` set to `"InterfaceChanged"`.
 */
export function useIInterfaceResolverInterfaceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iInterfaceResolverABI, 'InterfaceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInterfaceResolverABI,
    eventName: 'InterfaceChanged',
    ...config,
  } as UseContractEventConfig<typeof iInterfaceResolverABI, 'InterfaceChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iMajorityVotingABI, ...config } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canExecute"`.
 */
export function useIMajorityVotingCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMajorityVotingABI, functionName: 'canExecute', ...config } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canVote"`.
 */
export function useIMajorityVotingCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMajorityVotingABI, functionName: 'canVote', ...config } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useIMajorityVotingGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMajorityVotingABI, functionName: 'getVoteOption', ...config } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useIMajorityVotingIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useIMajorityVotingIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useIMajorityVotingIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useIMajorityVotingMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useIMajorityVotingSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMajorityVotingABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMajorityVotingABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, TFunctionName, TMode>({
    abi: iMajorityVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function useIMajorityVotingExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMajorityVotingABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iMajorityVotingABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, 'execute', TMode>({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function useIMajorityVotingVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMajorityVotingABI, 'vote'>['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof iMajorityVotingABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof iMajorityVotingABI, 'vote', TMode>({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function usePrepareIMajorityVotingWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iMajorityVotingABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iMajorityVotingABI, ...config } as UsePrepareContractWriteConfig<
    typeof iMajorityVotingABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIMajorityVotingExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIMajorityVotingVote(
  config: Omit<UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iMajorityVotingABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iMajorityVotingABI, ...config } as UseContractEventConfig<
    typeof iMajorityVotingABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIMajorityVotingVoteCastEvent(
  config: Omit<UseContractEventConfig<typeof iMajorityVotingABI, 'VoteCast'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iMajorityVotingABI, eventName: 'VoteCast', ...config } as UseContractEventConfig<
    typeof iMajorityVotingABI,
    'VoteCast'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMembershipABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iMembershipABI, ...config } as UseContractReadConfig<
    typeof iMembershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__ and `functionName` set to `"isMember"`.
 */
export function useIMembershipIsMember<
  TFunctionName extends 'isMember',
  TSelectData = ReadContractResult<typeof iMembershipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMembershipABI, functionName: 'isMember', ...config } as UseContractReadConfig<
    typeof iMembershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iMembershipABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iMembershipABI, ...config } as UseContractEventConfig<
    typeof iMembershipABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersAdded"`.
 */
export function useIMembershipMembersAddedEvent(
  config: Omit<UseContractEventConfig<typeof iMembershipABI, 'MembersAdded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iMembershipABI, eventName: 'MembersAdded', ...config } as UseContractEventConfig<
    typeof iMembershipABI,
    'MembersAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersRemoved"`.
 */
export function useIMembershipMembersRemovedEvent(
  config: Omit<UseContractEventConfig<typeof iMembershipABI, 'MembersRemoved'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iMembershipABI, eventName: 'MembersRemoved', ...config } as UseContractEventConfig<
    typeof iMembershipABI,
    'MembersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 */
export function useIMembershipMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, 'MembershipContractAnnounced'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, 'MembershipContractAnnounced'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBasefee', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockNumber', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getChainId', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getEthBalance', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getLastBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({ abi: iMulticall3ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3Value'>['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value', TMode> & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'blockAndAggregate'>['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate', TMode> & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryAggregate'>['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryBlockAndAggregate'>['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode> & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNameResolverABI}__.
 */
export function useINameResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iNameResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iNameResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iNameResolverABI, ...config } as UseContractReadConfig<
    typeof iNameResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNameResolverABI}__ and `functionName` set to `"name"`.
 */
export function useINameResolverName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iNameResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iNameResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iNameResolverABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof iNameResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iNameResolverABI}__.
 */
export function useINameResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iNameResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iNameResolverABI, ...config } as UseContractEventConfig<
    typeof iNameResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iNameResolverABI}__ and `eventName` set to `"NameChanged"`.
 */
export function useINameResolverNameChangedEvent(
  config: Omit<UseContractEventConfig<typeof iNameResolverABI, 'NameChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iNameResolverABI, eventName: 'NameChanged', ...config } as UseContractEventConfig<
    typeof iNameResolverABI,
    'NameChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__.
 */
export function useIPermissionConditionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPermissionConditionABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iPermissionConditionABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iPermissionConditionABI, ...config } as UseContractReadConfig<
    typeof iPermissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__ and `functionName` set to `"isGranted"`.
 */
export function useIPermissionConditionIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof iPermissionConditionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPermissionConditionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPermissionConditionABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof iPermissionConditionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__.
 */
export function useIPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iPluginABI, ...config } as UseContractReadConfig<
    typeof iPluginABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__ and `functionName` set to `"pluginType"`.
 */
export function useIPluginPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof iPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iPluginABI, functionName: 'pluginType', ...config } as UseContractReadConfig<
    typeof iPluginABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__.
 */
export function useIPluginRepoWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginRepoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPluginRepoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPluginRepoABI, TFunctionName, TMode>({ abi: iPluginRepoABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function useIPluginRepoCreateVersion<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginRepoABI, 'createVersion'>['request']['abi'],
        'createVersion',
        TMode
      > & { functionName?: 'createVersion' }
    : UseContractWriteConfig<typeof iPluginRepoABI, 'createVersion', TMode> & {
        abi?: never
        functionName?: 'createVersion'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginRepoABI, 'createVersion', TMode>({
    abi: iPluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function useIPluginRepoUpdateReleaseMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginRepoABI, 'updateReleaseMetadata'>['request']['abi'],
        'updateReleaseMetadata',
        TMode
      > & { functionName?: 'updateReleaseMetadata' }
    : UseContractWriteConfig<typeof iPluginRepoABI, 'updateReleaseMetadata', TMode> & {
        abi?: never
        functionName?: 'updateReleaseMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginRepoABI, 'updateReleaseMetadata', TMode>({
    abi: iPluginRepoABI,
    functionName: 'updateReleaseMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__.
 */
export function usePrepareIPluginRepoWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iPluginRepoABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iPluginRepoABI, ...config } as UsePrepareContractWriteConfig<
    typeof iPluginRepoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"createVersion"`.
 */
export function usePrepareIPluginRepoCreateVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'createVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginRepoABI,
    functionName: 'createVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'createVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 */
export function usePrepareIPluginRepoUpdateReleaseMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'updateReleaseMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginRepoABI,
    functionName: 'updateReleaseMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginRepoABI, 'updateReleaseMetadata'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginSetupABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iPluginSetupABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iPluginSetupABI, ...config } as UseContractReadConfig<
    typeof iPluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useIPluginSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iPluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iPluginSetupABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof iPluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginSetupABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPluginSetupABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, TFunctionName, TMode>({ abi: iPluginSetupABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useIPluginSetupPrepareInstallation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginSetupABI, 'prepareInstallation'>['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<typeof iPluginSetupABI, 'prepareInstallation', TMode> & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, 'prepareInstallation', TMode>({
    abi: iPluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useIPluginSetupPrepareUninstallation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginSetupABI, 'prepareUninstallation'>['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<typeof iPluginSetupABI, 'prepareUninstallation', TMode> & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, 'prepareUninstallation', TMode>({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useIPluginSetupPrepareUpdate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginSetupABI, 'prepareUpdate'>['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate', TMode> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof iPluginSetupABI, 'prepareUpdate', TMode>({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function usePrepareIPluginSetupWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iPluginSetupABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iPluginSetupABI, ...config } as UsePrepareContractWriteConfig<
    typeof iPluginSetupABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareIPluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareInstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareInstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePrepareIPluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUninstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUninstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareIPluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProposalABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iProposalABI, ...config } as UseContractReadConfig<
    typeof iProposalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useIProposalProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof iProposalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iProposalABI, functionName: 'proposalCount', ...config } as UseContractReadConfig<
    typeof iProposalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iProposalABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iProposalABI, ...config } as UseContractEventConfig<typeof iProposalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIProposalProposalCreatedEvent(
  config: Omit<UseContractEventConfig<typeof iProposalABI, 'ProposalCreated'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iProposalABI, eventName: 'ProposalCreated', ...config } as UseContractEventConfig<
    typeof iProposalABI,
    'ProposalCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIProposalProposalExecutedEvent(
  config: Omit<UseContractEventConfig<typeof iProposalABI, 'ProposalExecuted'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iProposalABI, eventName: 'ProposalExecuted', ...config } as UseContractEventConfig<
    typeof iProposalABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolVersionABI}__.
 */
export function useIProtocolVersionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProtocolVersionABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iProtocolVersionABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iProtocolVersionABI, ...config } as UseContractReadConfig<
    typeof iProtocolVersionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolVersionABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function useIProtocolVersionProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof iProtocolVersionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProtocolVersionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolVersionABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof iProtocolVersionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPubkeyResolverABI}__.
 */
export function useIPubkeyResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPubkeyResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iPubkeyResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iPubkeyResolverABI, ...config } as UseContractReadConfig<
    typeof iPubkeyResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPubkeyResolverABI}__ and `functionName` set to `"pubkey"`.
 */
export function useIPubkeyResolverPubkey<
  TFunctionName extends 'pubkey',
  TSelectData = ReadContractResult<typeof iPubkeyResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPubkeyResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iPubkeyResolverABI, functionName: 'pubkey', ...config } as UseContractReadConfig<
    typeof iPubkeyResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPubkeyResolverABI}__.
 */
export function useIPubkeyResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iPubkeyResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iPubkeyResolverABI, ...config } as UseContractEventConfig<
    typeof iPubkeyResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPubkeyResolverABI}__ and `eventName` set to `"PubkeyChanged"`.
 */
export function useIPubkeyResolverPubkeyChangedEvent(
  config: Omit<UseContractEventConfig<typeof iPubkeyResolverABI, 'PubkeyChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iPubkeyResolverABI, eventName: 'PubkeyChanged', ...config } as UseContractEventConfig<
    typeof iPubkeyResolverABI,
    'PubkeyChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTextResolverABI}__.
 */
export function useITextResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTextResolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iTextResolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iTextResolverABI, ...config } as UseContractReadConfig<
    typeof iTextResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTextResolverABI}__ and `functionName` set to `"text"`.
 */
export function useITextResolverText<
  TFunctionName extends 'text',
  TSelectData = ReadContractResult<typeof iTextResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTextResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iTextResolverABI, functionName: 'text', ...config } as UseContractReadConfig<
    typeof iTextResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTextResolverABI}__.
 */
export function useITextResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iTextResolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iTextResolverABI, ...config } as UseContractEventConfig<
    typeof iTextResolverABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTextResolverABI}__ and `eventName` set to `"TextChanged"`.
 */
export function useITextResolverTextChangedEvent(
  config: Omit<UseContractEventConfig<typeof iTextResolverABI, 'TextChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: iTextResolverABI, eventName: 'TextChanged', ...config } as UseContractEventConfig<
    typeof iTextResolverABI,
    'TextChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iVotesUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesUpgradeableDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iVotesUpgradeableABI, functionName: 'delegates', ...config } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesUpgradeableGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesUpgradeableGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesUpgradeableGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iVotesUpgradeableABI, functionName: 'getVotes', ...config } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iVotesUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, TFunctionName, TMode>({
    abi: iVotesUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesUpgradeableDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesUpgradeableABI, 'delegate'>['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, 'delegate', TMode>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesUpgradeableDelegateBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesUpgradeableABI, 'delegateBySig'>['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof iVotesUpgradeableABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesUpgradeableABI, 'delegateBySig', TMode>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function usePrepareIVotesUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iVotesUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesUpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesUpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iVotesUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iVotesUpgradeableABI, ...config } as UseContractEventConfig<
    typeof iVotesUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesUpgradeableDelegateChangedEvent(
  config: Omit<UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesUpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof initializableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: initializableABI, ...config } as UseContractEventConfig<
    typeof initializableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof initializableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: initializableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof initializableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: interfaceBasedRegistryABI, ...config } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"UPGRADE_REGISTRY_PERMISSION_ID"`.
 */
export function useInterfaceBasedRegistryUpgradeRegistryPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRY_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'UPGRADE_REGISTRY_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"dao"`.
 */
export function useInterfaceBasedRegistryDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: interfaceBasedRegistryABI, functionName: 'dao', ...config } as UseContractReadConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"entries"`.
 */
export function useInterfaceBasedRegistryEntries<
  TFunctionName extends 'entries',
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'entries',
    ...config,
  } as UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useInterfaceBasedRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"targetInterfaceId"`.
 */
export function useInterfaceBasedRegistryTargetInterfaceId<
  TFunctionName extends 'targetInterfaceId',
  TSelectData = ReadContractResult<typeof interfaceBasedRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interfaceBasedRegistryABI,
    functionName: 'targetInterfaceId',
    ...config,
  } as UseContractReadConfig<typeof interfaceBasedRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof interfaceBasedRegistryABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof interfaceBasedRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof interfaceBasedRegistryABI, TFunctionName, TMode>({
    abi: interfaceBasedRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useInterfaceBasedRegistryUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof interfaceBasedRegistryABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof interfaceBasedRegistryABI, 'upgradeTo', TMode>({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useInterfaceBasedRegistryUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof interfaceBasedRegistryABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof interfaceBasedRegistryABI, 'upgradeToAndCall', TMode>({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function usePrepareInterfaceBasedRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof interfaceBasedRegistryABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: interfaceBasedRegistryABI, ...config } as UsePrepareContractWriteConfig<
    typeof interfaceBasedRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareInterfaceBasedRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareInterfaceBasedRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interfaceBasedRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interfaceBasedRegistryABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__.
 */
export function useInterfaceBasedRegistryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof interfaceBasedRegistryABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: interfaceBasedRegistryABI, ...config } as UseContractEventConfig<
    typeof interfaceBasedRegistryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useInterfaceBasedRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useInterfaceBasedRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInterfaceBasedRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interfaceBasedRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useInterfaceBasedRegistryUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: interfaceBasedRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof interfaceBasedRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: majorityVotingBaseABI, ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpdateVotingSettingsPermissionId<
  TFunctionName extends 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canExecute"`.
 */
export function useMajorityVotingBaseCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: majorityVotingBaseABI, functionName: 'canExecute', ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canVote"`.
 */
export function useMajorityVotingBaseCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: majorityVotingBaseABI, functionName: 'canVote', ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"dao"`.
 */
export function useMajorityVotingBaseDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: majorityVotingBaseABI, functionName: 'dao', ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getProposal"`.
 */
export function useMajorityVotingBaseGetProposal<
  TFunctionName extends 'getProposal',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useMajorityVotingBaseGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"implementation"`.
 */
export function useMajorityVotingBaseImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useMajorityVotingBaseIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minDuration"`.
 */
export function useMajorityVotingBaseMinDuration<
  TFunctionName extends 'minDuration',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useMajorityVotingBaseMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minProposerVotingPower"`.
 */
export function useMajorityVotingBaseMinProposerVotingPower<
  TFunctionName extends 'minProposerVotingPower',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"pluginType"`.
 */
export function useMajorityVotingBasePluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: majorityVotingBaseABI, functionName: 'pluginType', ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useMajorityVotingBaseProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function useMajorityVotingBaseProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMajorityVotingBaseProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useMajorityVotingBaseSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMajorityVotingBaseSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"totalVotingPower"`.
 */
export function useMajorityVotingBaseTotalVotingPower<
  TFunctionName extends 'totalVotingPower',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"votingMode"`.
 */
export function useMajorityVotingBaseVotingMode<
  TFunctionName extends 'votingMode',
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: majorityVotingBaseABI, functionName: 'votingMode', ...config } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof majorityVotingBaseABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, TFunctionName, TMode>({
    abi: majorityVotingBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function useMajorityVotingBaseCreateProposal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'createProposal'>['request']['abi'],
        'createProposal',
        TMode
      > & { functionName?: 'createProposal' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'createProposal', TMode> & {
        abi?: never
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'createProposal', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function useMajorityVotingBaseExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'execute', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function useMajorityVotingBaseUpdateVotingSettings<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'updateVotingSettings'>['request']['abi'],
        'updateVotingSettings',
        TMode
      > & { functionName?: 'updateVotingSettings' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'updateVotingSettings', TMode> & {
        abi?: never
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'updateVotingSettings', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMajorityVotingBaseUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'upgradeTo', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMajorityVotingBaseUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'upgradeToAndCall', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function useMajorityVotingBaseVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'vote'>['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof majorityVotingBaseABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof majorityVotingBaseABI, 'vote', TMode>({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function usePrepareMajorityVotingBaseWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: majorityVotingBaseABI, ...config } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function usePrepareMajorityVotingBaseCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'createProposal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'createProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareMajorityVotingBaseExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function usePrepareMajorityVotingBaseUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'updateVotingSettings'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'updateVotingSettings'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMajorityVotingBaseUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMajorityVotingBaseUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareMajorityVotingBaseVote(
  config: Omit<UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: majorityVotingBaseABI, ...config } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMajorityVotingBaseAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMajorityVotingBaseBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMajorityVotingBaseInitializedEvent(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: majorityVotingBaseABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useMajorityVotingBaseProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useMajorityVotingBaseProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMajorityVotingBaseUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: majorityVotingBaseABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useMajorityVotingBaseVoteCastEvent(
  config: Omit<UseContractEventConfig<typeof majorityVotingBaseABI, 'VoteCast'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: majorityVotingBaseABI, eventName: 'VoteCast', ...config } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    'VoteCast'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 */
export function useMajorityVotingBaseVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'VotingSettingsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'VotingSettingsUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionConditionABI}__.
 */
export function usePermissionConditionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionConditionABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: permissionConditionABI, ...config } as UseContractReadConfig<
    typeof permissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionConditionABI}__ and `functionName` set to `"isGranted"`.
 */
export function usePermissionConditionIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof permissionConditionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: permissionConditionABI, functionName: 'isGranted', ...config } as UseContractReadConfig<
    typeof permissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionConditionABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function usePermissionConditionProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof permissionConditionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionConditionABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionConditionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePermissionConditionSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof permissionConditionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionConditionABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof permissionConditionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__.
 */
export function usePermissionLibRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionLibABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof permissionLibABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: permissionLibABI, ...config } as UseContractReadConfig<
    typeof permissionLibABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__ and `functionName` set to `"NO_CONDITION"`.
 */
export function usePermissionLibNoCondition<
  TFunctionName extends 'NO_CONDITION',
  TSelectData = ReadContractResult<typeof permissionLibABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionLibABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: permissionLibABI, functionName: 'NO_CONDITION', ...config } as UseContractReadConfig<
    typeof permissionLibABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof permissionManagerABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: permissionManagerABI, ...config } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function usePermissionManagerRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof permissionManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"isGranted"`.
 */
export function usePermissionManagerIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: permissionManagerABI, functionName: 'isGranted', ...config } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof permissionManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, TFunctionName, TMode>({
    abi: permissionManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePermissionManagerApplyMultiTargetPermissions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, 'applyMultiTargetPermissions'>['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'applyMultiTargetPermissions', TMode> & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'applyMultiTargetPermissions', TMode>({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePermissionManagerApplySingleTargetPermissions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, 'applySingleTargetPermissions'>['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'applySingleTargetPermissions', TMode> & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'applySingleTargetPermissions', TMode>({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePermissionManagerGrant<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, 'grant'>['request']['abi'],
        'grant',
        TMode
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'grant', TMode> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'grant', TMode>({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePermissionManagerGrantWithCondition<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, 'grantWithCondition'>['request']['abi'],
        'grantWithCondition',
        TMode
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'grantWithCondition', TMode> & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'grantWithCondition', TMode>({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePermissionManagerRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof permissionManagerABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof permissionManagerABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof permissionManagerABI, 'revoke', TMode>({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePreparePermissionManagerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof permissionManagerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: permissionManagerABI, ...config } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePreparePermissionManagerApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'applyMultiTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'applyMultiTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePreparePermissionManagerApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'applySingleTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'applySingleTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePreparePermissionManagerGrant(
  config: Omit<UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePreparePermissionManagerGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grantWithCondition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePreparePermissionManagerRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof permissionManagerABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: permissionManagerABI, ...config } as UseContractEventConfig<
    typeof permissionManagerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Granted"`.
 */
export function usePermissionManagerGrantedEvent(
  config: Omit<UseContractEventConfig<typeof permissionManagerABI, 'Granted'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: permissionManagerABI, eventName: 'Granted', ...config } as UseContractEventConfig<
    typeof permissionManagerABI,
    'Granted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePermissionManagerInitializedEvent(
  config: Omit<UseContractEventConfig<typeof permissionManagerABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: permissionManagerABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof permissionManagerABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Revoked"`.
 */
export function usePermissionManagerRevokedEvent(
  config: Omit<UseContractEventConfig<typeof permissionManagerABI, 'Revoked'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: permissionManagerABI, eventName: 'Revoked', ...config } as UseContractEventConfig<
    typeof permissionManagerABI,
    'Revoked'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractRead({ abi: pluginRepoABI, address: pluginRepoAddress[5], ...config } as UseContractReadConfig<
    typeof pluginRepoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"MAINTAINER_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoMaintainerPermissionId<
  TFunctionName extends 'MAINTAINER_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'MAINTAINER_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoRootPermissionId<
  TFunctionName extends 'ROOT_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"UPGRADE_REPO_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoUpgradeRepoPermissionId<
  TFunctionName extends 'UPGRADE_REPO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'UPGRADE_REPO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"buildCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoBuildCount<
  TFunctionName extends 'buildCount',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'buildCount',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"getLatestVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoGetLatestVersion<
  TFunctionName extends 'getLatestVersion',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'getLatestVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"getVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoGetVersion<
  TFunctionName extends 'getVersion',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'getVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"isGranted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoIsGranted<
  TFunctionName extends 'isGranted',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"latestRelease"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoLatestRelease<
  TFunctionName extends 'latestRelease',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'latestRelease',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"protocolVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof pluginRepoABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, TFunctionName, TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoApplyMultiTargetPermissions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'applyMultiTargetPermissions'>['request']['abi'],
        'applyMultiTargetPermissions',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'applyMultiTargetPermissions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'applyMultiTargetPermissions', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoApplySingleTargetPermissions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'applySingleTargetPermissions'>['request']['abi'],
        'applySingleTargetPermissions',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'applySingleTargetPermissions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'applySingleTargetPermissions', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"createVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoCreateVersion<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'createVersion'>['request']['abi'],
        'createVersion',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createVersion' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'createVersion', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createVersion'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'createVersion', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'createVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grant"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoGrant<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'grant'>['request']['abi'],
        'grant',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grant' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'grant', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'grant', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grantWithCondition"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoGrantWithCondition<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'grantWithCondition'>['request']['abi'],
        'grantWithCondition',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'grantWithCondition', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'grantWithCondition', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'initialize', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"revoke"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoRevoke<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revoke' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'revoke', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'revoke', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoUpdateReleaseMetadata<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'updateReleaseMetadata'>['request']['abi'],
        'updateReleaseMetadata',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'updateReleaseMetadata' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'updateReleaseMetadata', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateReleaseMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'updateReleaseMetadata', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'updateReleaseMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'upgradeTo', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginRepoAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof pluginRepoABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoABI, 'upgradeToAndCall', TMode>({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginRepoABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'applyMultiTargetPermissions'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'applyMultiTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'applySingleTargetPermissions'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'applySingleTargetPermissions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"createVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoCreateVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'createVersion'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'createVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'createVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grant"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoGrant(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grant'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"grantWithCondition"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grantWithCondition'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"revoke"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoRevoke(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginRepoABI, 'revoke'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"updateReleaseMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoUpdateReleaseMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'updateReleaseMetadata'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'updateReleaseMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'updateReleaseMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeTo'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePreparePluginRepoUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({ abi: pluginRepoABI, address: pluginRepoAddress[5], ...config } as UseContractEventConfig<
    typeof pluginRepoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'AdminChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'BeaconUpgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Granted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoGrantedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'Granted'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoInitializedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'Initialized'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"ReleaseMetadataUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoReleaseMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoABI, 'ReleaseMetadataUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginRepoAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'ReleaseMetadataUpdated',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'ReleaseMetadataUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Revoked"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoRevokedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'Revoked'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"Upgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoABI}__ and `eventName` set to `"VersionCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x9b72Af17B8aE55AE2F3C06E46A44D9bEaFb10801)
 */
export function usePluginRepoVersionCreatedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoABI, 'VersionCreated'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof pluginRepoAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoABI,
    address: pluginRepoAddress[5],
    eventName: 'VersionCreated',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoABI, 'VersionCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: pluginRepoRegistryABI, ...config } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"REGISTER_PLUGIN_REPO_PERMISSION_ID"`.
 */
export function usePluginRepoRegistryRegisterPluginRepoPermissionId<
  TFunctionName extends 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'REGISTER_PLUGIN_REPO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"UPGRADE_REGISTRY_PERMISSION_ID"`.
 */
export function usePluginRepoRegistryUpgradeRegistryPermissionId<
  TFunctionName extends 'UPGRADE_REGISTRY_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'UPGRADE_REGISTRY_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginRepoRegistryDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginRepoRegistryABI, functionName: 'dao', ...config } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"entries"`.
 */
export function usePluginRepoRegistryEntries<
  TFunctionName extends 'entries',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginRepoRegistryABI, functionName: 'entries', ...config } as UseContractReadConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function usePluginRepoRegistryProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginRepoRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"subdomainRegistrar"`.
 */
export function usePluginRepoRegistrySubdomainRegistrar<
  TFunctionName extends 'subdomainRegistrar',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'subdomainRegistrar',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"targetInterfaceId"`.
 */
export function usePluginRepoRegistryTargetInterfaceId<
  TFunctionName extends 'targetInterfaceId',
  TSelectData = ReadContractResult<typeof pluginRepoRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginRepoRegistryABI,
    functionName: 'targetInterfaceId',
    ...config,
  } as UseContractReadConfig<typeof pluginRepoRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoRegistryABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pluginRepoRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, TFunctionName, TMode>({
    abi: pluginRepoRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePluginRepoRegistryInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoRegistryABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof pluginRepoRegistryABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'initialize', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"registerPluginRepo"`.
 */
export function usePluginRepoRegistryRegisterPluginRepo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoRegistryABI, 'registerPluginRepo'>['request']['abi'],
        'registerPluginRepo',
        TMode
      > & { functionName?: 'registerPluginRepo' }
    : UseContractWriteConfig<typeof pluginRepoRegistryABI, 'registerPluginRepo', TMode> & {
        abi?: never
        functionName?: 'registerPluginRepo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'registerPluginRepo', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'registerPluginRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginRepoRegistryUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoRegistryABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'upgradeTo', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginRepoRegistryUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginRepoRegistryABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof pluginRepoRegistryABI, 'upgradeToAndCall', TMode>({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePreparePluginRepoRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: pluginRepoRegistryABI, ...config } as UsePrepareContractWriteConfig<
    typeof pluginRepoRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePluginRepoRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"registerPluginRepo"`.
 */
export function usePreparePluginRepoRegistryRegisterPluginRepo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'registerPluginRepo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'registerPluginRepo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'registerPluginRepo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginRepoRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginRepoRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginRepoRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginRepoRegistryABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__.
 */
export function usePluginRepoRegistryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pluginRepoRegistryABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pluginRepoRegistryABI, ...config } as UseContractEventConfig<
    typeof pluginRepoRegistryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginRepoRegistryAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoRegistryABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginRepoRegistryBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoRegistryABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginRepoRegistryInitializedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoRegistryABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: pluginRepoRegistryABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof pluginRepoRegistryABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"PluginRepoRegistered"`.
 */
export function usePluginRepoRegistryPluginRepoRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginRepoRegistryABI, 'PluginRepoRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginRepoRegistryABI,
    eventName: 'PluginRepoRegistered',
    ...config,
  } as UseContractEventConfig<typeof pluginRepoRegistryABI, 'PluginRepoRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginRepoRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginRepoRegistryUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof pluginRepoRegistryABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: pluginRepoRegistryABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof pluginRepoRegistryABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: pluginSetupABI, ...config } as UseContractReadConfig<
    typeof pluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginSetupImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginSetupABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof pluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function usePluginSetupProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginSetupABI, functionName: 'protocolVersion', ...config } as UseContractReadConfig<
    typeof pluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginSetupSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginSetupABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof pluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pluginSetupABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, TFunctionName, TMode>({ abi: pluginSetupABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePluginSetupPrepareInstallation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupABI, 'prepareInstallation'>['request']['abi'],
        'prepareInstallation',
        TMode
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<typeof pluginSetupABI, 'prepareInstallation', TMode> & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, 'prepareInstallation', TMode>({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePluginSetupPrepareUninstallation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupABI, 'prepareUninstallation'>['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<typeof pluginSetupABI, 'prepareUninstallation', TMode> & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, 'prepareUninstallation', TMode>({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePluginSetupPrepareUpdate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupABI, 'prepareUpdate'>['request']['abi'],
        'prepareUpdate',
        TMode
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate', TMode> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupABI, 'prepareUpdate', TMode>({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePreparePluginSetupWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginSetupABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: pluginSetupABI, ...config } as UsePrepareContractWriteConfig<
    typeof pluginSetupABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePreparePluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareInstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareInstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePreparePluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUninstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUninstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePreparePluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginSetupProcessorAddress
  } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_INSTALLATION_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyInstallationPermissionId<
  TFunctionName extends 'APPLY_INSTALLATION_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'APPLY_INSTALLATION_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_UNINSTALLATION_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyUninstallationPermissionId<
  TFunctionName extends 'APPLY_UNINSTALLATION_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'APPLY_UNINSTALLATION_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"APPLY_UPDATE_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyUpdatePermissionId<
  TFunctionName extends 'APPLY_UPDATE_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'APPLY_UPDATE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"protocolVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"repoRegistry"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorRepoRegistry<
  TFunctionName extends 'repoRegistry',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'repoRegistry',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"states"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorStates<
  TFunctionName extends 'states',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'states',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"validatePreparedSetupId"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorValidatePreparedSetupId<
  TFunctionName extends 'validatePreparedSetupId',
  TSelectData = ReadContractResult<typeof pluginSetupProcessorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractRead({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'validatePreparedSetupId',
    ...config,
  } as UseContractReadConfig<typeof pluginSetupProcessorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, TFunctionName, TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyInstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyInstallation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'applyInstallation'>['request']['abi'],
        'applyInstallation',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applyInstallation' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'applyInstallation', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applyInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'applyInstallation', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUninstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyUninstallation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'applyUninstallation'>['request']['abi'],
        'applyUninstallation',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applyUninstallation' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUninstallation', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applyUninstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'applyUninstallation', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUpdate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorApplyUpdate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'applyUpdate'>['request']['abi'],
        'applyUpdate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'applyUpdate' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUpdate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'applyUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'applyUpdate', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareInstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorPrepareInstallation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'prepareInstallation'>['request']['abi'],
        'prepareInstallation',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareInstallation', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'prepareInstallation', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUninstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorPrepareUninstallation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'prepareUninstallation'>['request']['abi'],
        'prepareUninstallation',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUninstallation', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'prepareUninstallation', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUpdate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorPrepareUpdate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof pluginSetupProcessorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginSetupProcessorABI, 'prepareUpdate'>['request']['abi'],
        'prepareUpdate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUpdate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof pluginSetupProcessorABI, 'prepareUpdate', TMode>({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginSetupProcessorAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyInstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorApplyInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyInstallation'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyInstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUninstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorApplyUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUninstallation'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUninstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"applyUpdate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorApplyUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUpdate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'applyUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'applyUpdate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareInstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareInstallation'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareInstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUninstallation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUninstallation'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUninstallation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `functionName` set to `"prepareUpdate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePreparePluginSetupProcessorPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUpdate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupProcessorABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pluginSetupProcessorABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof pluginSetupProcessorAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"InstallationApplied"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorInstallationAppliedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'InstallationApplied'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'InstallationApplied',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'InstallationApplied'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"InstallationPrepared"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorInstallationPreparedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'InstallationPrepared'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'InstallationPrepared',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'InstallationPrepared'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UninstallationApplied"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorUninstallationAppliedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UninstallationApplied'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'UninstallationApplied',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UninstallationApplied'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UninstallationPrepared"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorUninstallationPreparedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UninstallationPrepared'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'UninstallationPrepared',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UninstallationPrepared'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UpdateApplied"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorUpdateAppliedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdateApplied'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'UpdateApplied',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdateApplied'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginSetupProcessorABI}__ and `eventName` set to `"UpdatePrepared"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE8B5d8D66a02CD1b9Bd32a4064D7ABa45F51305e)
 */
export function usePluginSetupProcessorUpdatePreparedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdatePrepared'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof pluginSetupProcessorAddress } = {} as any,
) {
  return useContractEvent({
    abi: pluginSetupProcessorABI,
    address: pluginSetupProcessorAddress[5],
    eventName: 'UpdatePrepared',
    ...config,
  } as UseContractEventConfig<typeof pluginSetupProcessorABI, 'UpdatePrepared'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: pluginUupsUpgradeableABI, ...config } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function usePluginUupsUpgradeableUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginUupsUpgradeableDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: pluginUupsUpgradeableABI, functionName: 'dao', ...config } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginUupsUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"pluginType"`.
 */
export function usePluginUupsUpgradeablePluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function usePluginUupsUpgradeableProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginUupsUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginUupsUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pluginUupsUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pluginUupsUpgradeableABI, TFunctionName, TMode>({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginUupsUpgradeableUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginUupsUpgradeableABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof pluginUupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginUupsUpgradeableUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pluginUupsUpgradeableABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof pluginUupsUpgradeableABI, 'upgradeToAndCall', TMode>({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePreparePluginUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: pluginUupsUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pluginUupsUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pluginUupsUpgradeableABI, ...config } as UseContractEventConfig<
    typeof pluginUupsUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginUupsUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginUupsUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: pluginUupsUpgradeableABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof pluginUupsUpgradeableABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof proposalUpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof proposalUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: proposalUpgradeableABI, ...config } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useProposalUpgradeableProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof proposalUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof proposalUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof proposalUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useProposalUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof proposalUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof proposalUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof proposalUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof proposalUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: proposalUpgradeableABI, ...config } as UseContractEventConfig<
    typeof proposalUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useProposalUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useProposalUpgradeableProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useProposalUpgradeableProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolVersionABI}__.
 */
export function useProtocolVersionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof protocolVersionABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof protocolVersionABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: protocolVersionABI, ...config } as UseContractReadConfig<
    typeof protocolVersionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolVersionABI}__ and `functionName` set to `"protocolVersion"`.
 */
export function useProtocolVersionProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof protocolVersionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof protocolVersionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolVersionABI,
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof protocolVersionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: resolverABI, ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"ABI"`.
 */
export function useResolverAbi<
  TFunctionName extends 'ABI',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'ABI', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"addr"`.
 */
export function useResolverAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'addr', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"content"`.
 */
export function useResolverContent<
  TFunctionName extends 'content',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'content', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"contenthash"`.
 */
export function useResolverContenthash<
  TFunctionName extends 'contenthash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'contenthash', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"dnsRecord"`.
 */
export function useResolverDnsRecord<
  TFunctionName extends 'dnsRecord',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'dnsRecord', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"interfaceImplementer"`.
 */
export function useResolverInterfaceImplementer<
  TFunctionName extends 'interfaceImplementer',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'interfaceImplementer', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multihash"`.
 */
export function useResolverMultihash<
  TFunctionName extends 'multihash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'multihash', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"name"`.
 */
export function useResolverName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"pubkey"`.
 */
export function useResolverPubkey<
  TFunctionName extends 'pubkey',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'pubkey', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"resolve"`.
 */
export function useResolverResolve<
  TFunctionName extends 'resolve',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'resolve', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useResolverSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"text"`.
 */
export function useResolverText<
  TFunctionName extends 'text',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'text', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"zonehash"`.
 */
export function useResolverZonehash<
  TFunctionName extends 'zonehash',
  TSelectData = ReadContractResult<typeof resolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof resolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: resolverABI, functionName: 'zonehash', ...config } as UseContractReadConfig<
    typeof resolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof resolverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, TFunctionName, TMode>({ abi: resolverABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicall"`.
 */
export function useResolverMulticall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'multicall'>['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof resolverABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'multicall', TMode>({
    abi: resolverABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicallWithNodeCheck"`.
 */
export function useResolverMulticallWithNodeCheck<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'multicallWithNodeCheck'>['request']['abi'],
        'multicallWithNodeCheck',
        TMode
      > & { functionName?: 'multicallWithNodeCheck' }
    : UseContractWriteConfig<typeof resolverABI, 'multicallWithNodeCheck', TMode> & {
        abi?: never
        functionName?: 'multicallWithNodeCheck'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'multicallWithNodeCheck', TMode>({
    abi: resolverABI,
    functionName: 'multicallWithNodeCheck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setABI"`.
 */
export function useResolverSetAbi<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setABI'>['request']['abi'],
        'setABI',
        TMode
      > & { functionName?: 'setABI' }
    : UseContractWriteConfig<typeof resolverABI, 'setABI', TMode> & {
        abi?: never
        functionName?: 'setABI'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setABI', TMode>({
    abi: resolverABI,
    functionName: 'setABI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setAddr"`.
 */
export function useResolverSetAddr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setAddr'>['request']['abi'],
        'setAddr',
        TMode
      > & { functionName?: 'setAddr' }
    : UseContractWriteConfig<typeof resolverABI, 'setAddr', TMode> & {
        abi?: never
        functionName?: 'setAddr'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setAddr', TMode>({
    abi: resolverABI,
    functionName: 'setAddr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContent"`.
 */
export function useResolverSetContent<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setContent'>['request']['abi'],
        'setContent',
        TMode
      > & { functionName?: 'setContent' }
    : UseContractWriteConfig<typeof resolverABI, 'setContent', TMode> & {
        abi?: never
        functionName?: 'setContent'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setContent', TMode>({
    abi: resolverABI,
    functionName: 'setContent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContenthash"`.
 */
export function useResolverSetContenthash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setContenthash'>['request']['abi'],
        'setContenthash',
        TMode
      > & { functionName?: 'setContenthash' }
    : UseContractWriteConfig<typeof resolverABI, 'setContenthash', TMode> & {
        abi?: never
        functionName?: 'setContenthash'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setContenthash', TMode>({
    abi: resolverABI,
    functionName: 'setContenthash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setDnsrr"`.
 */
export function useResolverSetDnsrr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setDnsrr'>['request']['abi'],
        'setDnsrr',
        TMode
      > & { functionName?: 'setDnsrr' }
    : UseContractWriteConfig<typeof resolverABI, 'setDnsrr', TMode> & {
        abi?: never
        functionName?: 'setDnsrr'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setDnsrr', TMode>({
    abi: resolverABI,
    functionName: 'setDnsrr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setInterface"`.
 */
export function useResolverSetInterface<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setInterface'>['request']['abi'],
        'setInterface',
        TMode
      > & { functionName?: 'setInterface' }
    : UseContractWriteConfig<typeof resolverABI, 'setInterface', TMode> & {
        abi?: never
        functionName?: 'setInterface'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setInterface', TMode>({
    abi: resolverABI,
    functionName: 'setInterface',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setMultihash"`.
 */
export function useResolverSetMultihash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setMultihash'>['request']['abi'],
        'setMultihash',
        TMode
      > & { functionName?: 'setMultihash' }
    : UseContractWriteConfig<typeof resolverABI, 'setMultihash', TMode> & {
        abi?: never
        functionName?: 'setMultihash'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setMultihash', TMode>({
    abi: resolverABI,
    functionName: 'setMultihash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setName"`.
 */
export function useResolverSetName<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setName'>['request']['abi'],
        'setName',
        TMode
      > & { functionName?: 'setName' }
    : UseContractWriteConfig<typeof resolverABI, 'setName', TMode> & {
        abi?: never
        functionName?: 'setName'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setName', TMode>({
    abi: resolverABI,
    functionName: 'setName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setPubkey"`.
 */
export function useResolverSetPubkey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setPubkey'>['request']['abi'],
        'setPubkey',
        TMode
      > & { functionName?: 'setPubkey' }
    : UseContractWriteConfig<typeof resolverABI, 'setPubkey', TMode> & {
        abi?: never
        functionName?: 'setPubkey'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setPubkey', TMode>({
    abi: resolverABI,
    functionName: 'setPubkey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setText"`.
 */
export function useResolverSetText<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof resolverABI, 'setText'>['request']['abi'],
        'setText',
        TMode
      > & { functionName?: 'setText' }
    : UseContractWriteConfig<typeof resolverABI, 'setText', TMode> & {
        abi?: never
        functionName?: 'setText'
      } = {} as any,
) {
  return useContractWrite<typeof resolverABI, 'setText', TMode>({
    abi: resolverABI,
    functionName: 'setText',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__.
 */
export function usePrepareResolverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: resolverABI, ...config } as UsePrepareContractWriteConfig<
    typeof resolverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareResolverMulticall(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'multicall'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"multicallWithNodeCheck"`.
 */
export function usePrepareResolverMulticallWithNodeCheck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resolverABI, 'multicallWithNodeCheck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'multicallWithNodeCheck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'multicallWithNodeCheck'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setABI"`.
 */
export function usePrepareResolverSetAbi(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setABI'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setABI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setABI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setAddr"`.
 */
export function usePrepareResolverSetAddr(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setAddr'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setAddr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setAddr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContent"`.
 */
export function usePrepareResolverSetContent(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setContent'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setContent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setContent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setContenthash"`.
 */
export function usePrepareResolverSetContenthash(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setContenthash'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setContenthash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setContenthash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setDnsrr"`.
 */
export function usePrepareResolverSetDnsrr(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setDnsrr'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setDnsrr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setDnsrr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setInterface"`.
 */
export function usePrepareResolverSetInterface(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setInterface'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setInterface',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setInterface'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setMultihash"`.
 */
export function usePrepareResolverSetMultihash(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setMultihash'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setMultihash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setMultihash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setName"`.
 */
export function usePrepareResolverSetName(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setName'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setPubkey"`.
 */
export function usePrepareResolverSetPubkey(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setPubkey'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setPubkey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setPubkey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resolverABI}__ and `functionName` set to `"setText"`.
 */
export function usePrepareResolverSetText(
  config: Omit<UsePrepareContractWriteConfig<typeof resolverABI, 'setText'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: resolverABI,
    functionName: 'setText',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resolverABI, 'setText'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__.
 */
export function useResolverEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof resolverABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, ...config } as UseContractEventConfig<typeof resolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ABIChanged"`.
 */
export function useResolverAbiChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'ABIChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'ABIChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'ABIChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"AddrChanged"`.
 */
export function useResolverAddrChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'AddrChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'AddrChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'AddrChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"AddressChanged"`.
 */
export function useResolverAddressChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'AddressChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'AddressChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'AddressChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ContentChanged"`.
 */
export function useResolverContentChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'ContentChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'ContentChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'ContentChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"ContenthashChanged"`.
 */
export function useResolverContenthashChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'ContenthashChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'ContenthashChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'ContenthashChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSRecordChanged"`.
 */
export function useResolverDnsRecordChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'DNSRecordChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'DNSRecordChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'DNSRecordChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSRecordDeleted"`.
 */
export function useResolverDnsRecordDeletedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'DNSRecordDeleted'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'DNSRecordDeleted', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'DNSRecordDeleted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"DNSZonehashChanged"`.
 */
export function useResolverDnsZonehashChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'DNSZonehashChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'DNSZonehashChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'DNSZonehashChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"InterfaceChanged"`.
 */
export function useResolverInterfaceChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'InterfaceChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'InterfaceChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'InterfaceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"NameChanged"`.
 */
export function useResolverNameChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'NameChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'NameChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'NameChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"PubkeyChanged"`.
 */
export function useResolverPubkeyChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'PubkeyChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'PubkeyChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'PubkeyChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resolverABI}__ and `eventName` set to `"TextChanged"`.
 */
export function useResolverTextChangedEvent(
  config: Omit<UseContractEventConfig<typeof resolverABI, 'TextChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: resolverABI, eventName: 'TextChanged', ...config } as UseContractEventConfig<
    typeof resolverABI,
    'TextChanged'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeArtifacts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeContracts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeSenders', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetArtifacts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetContracts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetInterfaces"`.
 */
export function useStdInvariantTargetInterfaces<
  TFunctionName extends 'targetInterfaces',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetInterfaces', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetSelectors', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetSenders', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__.
 */
export function useTestnetErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: testnetErc20ABI, ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useTestnetErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTestnetErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useTestnetErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useTestnetErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"owner"`.
 */
export function useTestnetErc20Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useTestnetErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTestnetErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof testnetErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetErc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetErc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof testnetErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__.
 */
export function useTestnetErc20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testnetErc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, TFunctionName, TMode>({ abi: testnetErc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useTestnetErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'approve', TMode>({
    abi: testnetErc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTestnetErc20DecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'decreaseAllowance', TMode>({
    abi: testnetErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTestnetErc20IncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'increaseAllowance', TMode>({
    abi: testnetErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useTestnetErc20Mint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'mint', TMode>({
    abi: testnetErc20ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useTestnetErc20RenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'renounceOwnership', TMode>({
    abi: testnetErc20ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useTestnetErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'transfer', TMode>({
    abi: testnetErc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTestnetErc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'transferFrom', TMode>({
    abi: testnetErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useTestnetErc20TransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetErc20ABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof testnetErc20ABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof testnetErc20ABI, 'transferOwnership', TMode>({
    abi: testnetErc20ABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__.
 */
export function usePrepareTestnetErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetErc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: testnetErc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof testnetErc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTestnetErc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTestnetErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTestnetErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTestnetErc20Mint(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'mint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareTestnetErc20RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTestnetErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTestnetErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetErc20ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareTestnetErc20TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetErc20ABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetErc20ABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetErc20ABI}__.
 */
export function useTestnetErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof testnetErc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: testnetErc20ABI, ...config } as UseContractEventConfig<
    typeof testnetErc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useTestnetErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof testnetErc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testnetErc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof testnetErc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetErc20ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useTestnetErc20OwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof testnetErc20ABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: testnetErc20ABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof testnetErc20ABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTestnetErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof testnetErc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testnetErc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof testnetErc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetTokenFaucetABI}__.
 */
export function useTestnetTokenFaucetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testnetTokenFaucetABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: testnetTokenFaucetABI, ...config } as UseContractReadConfig<
    typeof testnetTokenFaucetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"allTokens"`.
 */
export function useTestnetTokenFaucetAllTokens<
  TFunctionName extends 'allTokens',
  TSelectData = ReadContractResult<typeof testnetTokenFaucetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetTokenFaucetABI, functionName: 'allTokens', ...config } as UseContractReadConfig<
    typeof testnetTokenFaucetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"owner"`.
 */
export function useTestnetTokenFaucetOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof testnetTokenFaucetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetTokenFaucetABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof testnetTokenFaucetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"tokenCount"`.
 */
export function useTestnetTokenFaucetTokenCount<
  TFunctionName extends 'tokenCount',
  TSelectData = ReadContractResult<typeof testnetTokenFaucetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: testnetTokenFaucetABI, functionName: 'tokenCount', ...config } as UseContractReadConfig<
    typeof testnetTokenFaucetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"tokenWithSymbol"`.
 */
export function useTestnetTokenFaucetTokenWithSymbol<
  TFunctionName extends 'tokenWithSymbol',
  TSelectData = ReadContractResult<typeof testnetTokenFaucetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testnetTokenFaucetABI,
    functionName: 'tokenWithSymbol',
    ...config,
  } as UseContractReadConfig<typeof testnetTokenFaucetABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__.
 */
export function useTestnetTokenFaucetWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetTokenFaucetABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testnetTokenFaucetABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testnetTokenFaucetABI, TFunctionName, TMode>({
    abi: testnetTokenFaucetABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"create"`.
 */
export function useTestnetTokenFaucetCreate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetTokenFaucetABI, 'create'>['request']['abi'],
        'create',
        TMode
      > & { functionName?: 'create' }
    : UseContractWriteConfig<typeof testnetTokenFaucetABI, 'create', TMode> & {
        abi?: never
        functionName?: 'create'
      } = {} as any,
) {
  return useContractWrite<typeof testnetTokenFaucetABI, 'create', TMode>({
    abi: testnetTokenFaucetABI,
    functionName: 'create',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"drip"`.
 */
export function useTestnetTokenFaucetDrip<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetTokenFaucetABI, 'drip'>['request']['abi'],
        'drip',
        TMode
      > & { functionName?: 'drip' }
    : UseContractWriteConfig<typeof testnetTokenFaucetABI, 'drip', TMode> & {
        abi?: never
        functionName?: 'drip'
      } = {} as any,
) {
  return useContractWrite<typeof testnetTokenFaucetABI, 'drip', TMode>({
    abi: testnetTokenFaucetABI,
    functionName: 'drip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useTestnetTokenFaucetRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetTokenFaucetABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof testnetTokenFaucetABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof testnetTokenFaucetABI, 'renounceOwnership', TMode>({
    abi: testnetTokenFaucetABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useTestnetTokenFaucetTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testnetTokenFaucetABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof testnetTokenFaucetABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof testnetTokenFaucetABI, 'transferOwnership', TMode>({
    abi: testnetTokenFaucetABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__.
 */
export function usePrepareTestnetTokenFaucetWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: testnetTokenFaucetABI, ...config } as UsePrepareContractWriteConfig<
    typeof testnetTokenFaucetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareTestnetTokenFaucetCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'create'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetTokenFaucetABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'create'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"drip"`.
 */
export function usePrepareTestnetTokenFaucetDrip(
  config: Omit<UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'drip'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetTokenFaucetABI,
    functionName: 'drip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'drip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareTestnetTokenFaucetRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetTokenFaucetABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareTestnetTokenFaucetTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testnetTokenFaucetABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testnetTokenFaucetABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetTokenFaucetABI}__.
 */
export function useTestnetTokenFaucetEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof testnetTokenFaucetABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: testnetTokenFaucetABI, ...config } as UseContractEventConfig<
    typeof testnetTokenFaucetABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testnetTokenFaucetABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useTestnetTokenFaucetOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof testnetTokenFaucetABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testnetTokenFaucetABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof testnetTokenFaucetABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractRead({ abi: tokenVotingABI, address: tokenVotingAddress[5], ...config } as UseContractReadConfig<
    typeof tokenVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpdateVotingSettingsPermissionId<
  TFunctionName extends 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpgradePluginPermissionId<
  TFunctionName extends 'UPGRADE_PLUGIN_PERMISSION_ID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"canExecute"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingCanExecute<
  TFunctionName extends 'canExecute',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"canVote"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"dao"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingDao<
  TFunctionName extends 'dao',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getProposal"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingGetProposal<
  TFunctionName extends 'getProposal',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getVoteOption"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingGetVoteOption<
  TFunctionName extends 'getVoteOption',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"getVotingToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingGetVotingToken<
  TFunctionName extends 'getVotingToken',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'getVotingToken',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"implementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isMember"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingIsMember<
  TFunctionName extends 'isMember',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isMinParticipationReached"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingIsMinParticipationReached<
  TFunctionName extends 'isMinParticipationReached',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingIsSupportThresholdReached<
  TFunctionName extends 'isSupportThresholdReached',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingIsSupportThresholdReachedEarly<
  TFunctionName extends 'isSupportThresholdReachedEarly',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minDuration"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMinDuration<
  TFunctionName extends 'minDuration',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minParticipation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMinParticipation<
  TFunctionName extends 'minParticipation',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"minProposerVotingPower"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMinProposerVotingPower<
  TFunctionName extends 'minProposerVotingPower',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"pluginType"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingPluginType<
  TFunctionName extends 'pluginType',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"proposalCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"protocolVersion"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingProtocolVersion<
  TFunctionName extends 'protocolVersion',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'protocolVersion',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"supportThreshold"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingSupportThreshold<
  TFunctionName extends 'supportThreshold',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"totalVotingPower"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingTotalVotingPower<
  TFunctionName extends 'totalVotingPower',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"votingMode"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingVotingMode<
  TFunctionName extends 'votingMode',
  TSelectData = ReadContractResult<typeof tokenVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'votingMode',
    ...config,
  } as UseContractReadConfig<typeof tokenVotingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof tokenVotingABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, TFunctionName, TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"createProposal"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingCreateProposal<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'createProposal'>['request']['abi'],
        'createProposal',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createProposal' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'createProposal', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'createProposal', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingExecute<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'execute' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'execute', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'execute', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'initialize', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"updateVotingSettings"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpdateVotingSettings<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'updateVotingSettings'>['request']['abi'],
        'updateVotingSettings',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'updateVotingSettings' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'updateVotingSettings', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'updateVotingSettings', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'updateVotingSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'upgradeTo', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'upgradeToAndCall', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"vote"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingVote<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tokenVotingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tokenVotingABI, 'vote'>['request']['abi'],
        'vote',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'vote' }
    : UseContractWriteConfig<typeof tokenVotingABI, 'vote', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof tokenVotingABI, 'vote', TMode>({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenVotingABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"createProposal"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'createProposal'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'createProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenVotingABI, 'execute'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"updateVotingSettings"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'updateVotingSettings'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'updateVotingSettings'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenVotingABI}__ and `functionName` set to `"vote"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function usePrepareTokenVotingVote(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenVotingABI, 'vote'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenVotingABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({ abi: tokenVotingABI, address: tokenVotingAddress[5], ...config } as UseContractEventConfig<
    typeof tokenVotingABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'AdminChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'BeaconUpgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingInitializedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'Initialized'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembersAdded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMembersAddedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'MembersAdded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'MembersAdded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'MembersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembersRemoved"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMembersRemovedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'MembersRemoved'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'MembersRemoved',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'MembersRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'MembershipContractAnnounced'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'MembershipContractAnnounced'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"ProposalCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingProposalCreatedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'ProposalCreated'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"ProposalExecuted"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingProposalExecutedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'ProposalExecuted'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"Upgraded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"VoteCast"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingVoteCastEvent(
  config: Omit<UseContractEventConfig<typeof tokenVotingABI, 'VoteCast'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof tokenVotingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenVotingABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x17e36c2df61ee17e59070773228caf35938f8acd)
 */
export function useTokenVotingVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenVotingABI, 'VotingSettingsUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tokenVotingAddress } = {} as any,
) {
  return useContractEvent({
    abi: tokenVotingABI,
    address: tokenVotingAddress[5],
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<typeof tokenVotingABI, 'VotingSettingsUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__.
 */
export function useTribeTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: tribeTestABI, ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTribeTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useTribeTestExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'excludeArtifacts', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useTribeTestExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'excludeContracts', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useTribeTestExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'excludeSenders', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useTribeTestTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tribeTestABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useTribeTestTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'targetArtifacts', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useTribeTestTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'targetContracts', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetInterfaces"`.
 */
export function useTribeTestTargetInterfaces<
  TFunctionName extends 'targetInterfaces',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'targetInterfaces', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useTribeTestTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'targetSelectors', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useTribeTestTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof tribeTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tribeTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: tribeTestABI, functionName: 'targetSenders', ...config } as UseContractReadConfig<
    typeof tribeTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tribeTestABI}__.
 */
export function useTribeTestWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tribeTestABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof tribeTestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof tribeTestABI, TFunctionName, TMode>({ abi: tribeTestABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"failed"`.
 */
export function useTribeTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tribeTestABI, 'failed'>['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof tribeTestABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof tribeTestABI, 'failed', TMode>({
    abi: tribeTestABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tribeTestABI}__.
 */
export function usePrepareTribeTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof tribeTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tribeTestABI, ...config } as UsePrepareContractWriteConfig<
    typeof tribeTestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tribeTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTribeTestFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof tribeTestABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tribeTestABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tribeTestABI, 'failed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__.
 */
export function useTribeTestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, ...config } as UseContractEventConfig<typeof tribeTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log"`.
 */
export function useTribeTestLogEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useTribeTestLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useTribeTestLogArrayEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_array', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTribeTestLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTribeTestLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useTribeTestLogIntEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTribeTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTribeTestLogNamedArrayEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTribeTestLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTribeTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTribeTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: tribeTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof tribeTestABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTribeTestLogNamedDecimalUintEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_decimal_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: tribeTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof tribeTestABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTribeTestLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTribeTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTribeTestLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_named_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useTribeTestLogStringEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTribeTestLogUintEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'log_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tribeTestABI}__ and `eventName` set to `"logs"`.
 */
export function useTribeTestLogsEvent(
  config: Omit<UseContractEventConfig<typeof tribeTestABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tribeTestABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof tribeTestABI,
    'logs'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: uupsUpgradeableABI, ...config } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: uupsUpgradeableABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: uupsUpgradeableABI, ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc1822ProxiableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1822ProxiableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof ierc1822ProxiableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc1822ProxiableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>)
}
